type FranchiseAndLocations {
  id: ID
  userID: ID!
  franchise: String!
  location: String!
  latitude: Float!
  longitude: Float!
}

type Products {
  id: ID
  location: String!
  price: Float!
  parValue: Float!
  packSize: String!
  storageType: String!
  supplier: String!
  brand: String
  unit: String!
  itemNumber: Int!
  description: String!
  commonField: String
}

type RecipeMix {
  id: ID
  menuID: ID!
  productID: ID!
  quantityUsed: Float!
}

type MenuItems {
  id: ID
  price: Float
  location: String!
  menuName: String!
}

type OrderCartItems {
  id: ID
  productID: ID!
  quantityToBuy: Float!
  packSizeToBuy: Int!
  subtotalCost: Float!
}

type OrderCarts {
  id: ID
  location: String!
  supplyOrderID: ID
  supplyOrderTimestamp: AWSTimestamp
  orderType: String
  totalCost: Float
  sent: Boolean
  acknowledged: Boolean
  shipped: Boolean
  received: Boolean
  paid: Boolean
}

type InventoryCarts {
  id: InventoryCountItems
  location: String!
  completed: Boolean!
}

type InventoryCountItems {
  id: ID
  inventoryCartID: InventoryCarts
  productID: Products
  quantityLeft: [Float!]
  version: Int!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelFranchiseAndLocationsConnection {
  items: [FranchiseAndLocations]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelFranchiseAndLocationsFilterInput {
  id: ModelIDFilterInput
  userID: ModelIDFilterInput
  franchise: ModelStringFilterInput
  location: ModelStringFilterInput
  latitude: ModelFloatFilterInput
  longitude: ModelFloatFilterInput
  and: [ModelFranchiseAndLocationsFilterInput]
  or: [ModelFranchiseAndLocationsFilterInput]
  not: ModelFranchiseAndLocationsFilterInput
}

type Query {
  getFranchiseAndLocations(id: ID!): FranchiseAndLocations
  listFranchiseAndLocationss(filter: ModelFranchiseAndLocationsFilterInput, limit: Int, nextToken: String): ModelFranchiseAndLocationsConnection
  getProducts(id: ID!): Products
  listProductss(filter: ModelProductsFilterInput, limit: Int, nextToken: String): ModelProductsConnection
  getRecipeMix(id: ID!): RecipeMix
  listRecipeMixs(filter: ModelRecipeMixFilterInput, limit: Int, nextToken: String): ModelRecipeMixConnection
  getMenuItems(id: ID!): MenuItems
  listMenuItemss(filter: ModelMenuItemsFilterInput, limit: Int, nextToken: String): ModelMenuItemsConnection
  getOrderCartItems(id: ID!): OrderCartItems
  listOrderCartItemss(filter: ModelOrderCartItemsFilterInput, limit: Int, nextToken: String): ModelOrderCartItemsConnection
  getOrderCarts(id: ID!): OrderCarts
  listOrderCartss(filter: ModelOrderCartsFilterInput, limit: Int, nextToken: String): ModelOrderCartsConnection
  getInventoryCarts(id: ID!): InventoryCarts
  listInventoryCartss(filter: ModelInventoryCartsFilterInput, limit: Int, nextToken: String): ModelInventoryCartsConnection
  getInventoryCountItems(id: ID!): InventoryCountItems
  listInventoryCountItemss(filter: ModelInventoryCountItemsFilterInput, limit: Int, nextToken: String): ModelInventoryCountItemsConnection
  searchProductss(filter: SearchableProductsFilterInput, sort: SearchableProductsSortInput, limit: Int, nextToken: Int): SearchableProductsConnection
}

input CreateFranchiseAndLocationsInput {
  id: ID
  userID: ID!
  franchise: String!
  location: String!
  latitude: Float!
  longitude: Float!
}

input UpdateFranchiseAndLocationsInput {
  id: ID!
  userID: ID
  franchise: String
  location: String
  latitude: Float
  longitude: Float
}

input DeleteFranchiseAndLocationsInput {
  id: ID
}

type Mutation {
  createFranchiseAndLocations(input: CreateFranchiseAndLocationsInput!): FranchiseAndLocations
  updateFranchiseAndLocations(input: UpdateFranchiseAndLocationsInput!): FranchiseAndLocations
  deleteFranchiseAndLocations(input: DeleteFranchiseAndLocationsInput!): FranchiseAndLocations
  createProducts(input: CreateProductsInput!): Products
  updateProducts(input: UpdateProductsInput!): Products
  deleteProducts(input: DeleteProductsInput!): Products
  createRecipeMix(input: CreateRecipeMixInput!): RecipeMix
  updateRecipeMix(input: UpdateRecipeMixInput!): RecipeMix
  deleteRecipeMix(input: DeleteRecipeMixInput!): RecipeMix
  createMenuItems(input: CreateMenuItemsInput!): MenuItems
  updateMenuItems(input: UpdateMenuItemsInput!): MenuItems
  deleteMenuItems(input: DeleteMenuItemsInput!): MenuItems
  createOrderCartItems(input: CreateOrderCartItemsInput!): OrderCartItems
  updateOrderCartItems(input: UpdateOrderCartItemsInput!): OrderCartItems
  deleteOrderCartItems(input: DeleteOrderCartItemsInput!): OrderCartItems
  createOrderCarts(input: CreateOrderCartsInput!): OrderCarts
  updateOrderCarts(input: UpdateOrderCartsInput!): OrderCarts
  deleteOrderCarts(input: DeleteOrderCartsInput!): OrderCarts
  createInventoryCarts(input: CreateInventoryCartsInput!): InventoryCarts
  updateInventoryCarts(input: UpdateInventoryCartsInput!): InventoryCarts
  deleteInventoryCarts(input: DeleteInventoryCartsInput!): InventoryCarts
  createInventoryCountItems(input: CreateInventoryCountItemsInput!): InventoryCountItems
  updateInventoryCountItems(input: UpdateInventoryCountItemsInput!): InventoryCountItems
  deleteInventoryCountItems(input: DeleteInventoryCountItemsInput!): InventoryCountItems
}

type ModelProductsConnection {
  items: [Products]
  nextToken: String
}

input ModelProductsFilterInput {
  id: ModelIDFilterInput
  location: ModelStringFilterInput
  price: ModelFloatFilterInput
  parValue: ModelFloatFilterInput
  packSize: ModelStringFilterInput
  storageType: ModelStringFilterInput
  supplier: ModelStringFilterInput
  brand: ModelStringFilterInput
  unit: ModelStringFilterInput
  itemNumber: ModelIntFilterInput
  description: ModelStringFilterInput
  commonField: ModelStringFilterInput
  and: [ModelProductsFilterInput]
  or: [ModelProductsFilterInput]
  not: ModelProductsFilterInput
}

input CreateProductsInput {
  id: ID
  location: String!
  price: Float!
  parValue: Float!
  packSize: String!
  storageType: String!
  supplier: String!
  brand: String
  unit: String!
  itemNumber: Int!
  description: String!
  commonField: String
}

input UpdateProductsInput {
  id: ID!
  location: String
  price: Float
  parValue: Float
  packSize: String
  storageType: String
  supplier: String
  brand: String
  unit: String
  itemNumber: Int
  description: String
  commonField: String
}

input DeleteProductsInput {
  id: ID
}

type ModelRecipeMixConnection {
  items: [RecipeMix]
  nextToken: String
}

input ModelRecipeMixFilterInput {
  id: ModelIDFilterInput
  menuID: ModelIDFilterInput
  productID: ModelIDFilterInput
  quantityUsed: ModelFloatFilterInput
  and: [ModelRecipeMixFilterInput]
  or: [ModelRecipeMixFilterInput]
  not: ModelRecipeMixFilterInput
}

input CreateRecipeMixInput {
  id: ID
  menuID: ID!
  productID: ID!
  quantityUsed: Float!
}

input UpdateRecipeMixInput {
  id: ID!
  menuID: ID
  productID: ID
  quantityUsed: Float
}

input DeleteRecipeMixInput {
  id: ID
}

type ModelMenuItemsConnection {
  items: [MenuItems]
  nextToken: String
}

input ModelMenuItemsFilterInput {
  id: ModelIDFilterInput
  price: ModelFloatFilterInput
  location: ModelStringFilterInput
  menuName: ModelStringFilterInput
  and: [ModelMenuItemsFilterInput]
  or: [ModelMenuItemsFilterInput]
  not: ModelMenuItemsFilterInput
}

input CreateMenuItemsInput {
  id: ID
  price: Float
  location: String!
  menuName: String!
}

input UpdateMenuItemsInput {
  id: ID!
  price: Float
  location: String
  menuName: String
}

input DeleteMenuItemsInput {
  id: ID
}

type ModelOrderCartItemsConnection {
  items: [OrderCartItems]
  nextToken: String
}

input ModelOrderCartItemsFilterInput {
  id: ModelIDFilterInput
  productID: ModelIDFilterInput
  quantityToBuy: ModelFloatFilterInput
  packSizeToBuy: ModelIntFilterInput
  subtotalCost: ModelFloatFilterInput
  and: [ModelOrderCartItemsFilterInput]
  or: [ModelOrderCartItemsFilterInput]
  not: ModelOrderCartItemsFilterInput
}

input CreateOrderCartItemsInput {
  id: ID
  productID: ID!
  quantityToBuy: Float!
  packSizeToBuy: Int!
  subtotalCost: Float!
}

input UpdateOrderCartItemsInput {
  id: ID!
  productID: ID
  quantityToBuy: Float
  packSizeToBuy: Int
  subtotalCost: Float
}

input DeleteOrderCartItemsInput {
  id: ID
}

type ModelOrderCartsConnection {
  items: [OrderCarts]
  nextToken: String
}

input ModelOrderCartsFilterInput {
  id: ModelIDFilterInput
  location: ModelStringFilterInput
  supplyOrderID: ModelIDFilterInput
  supplyOrderTimestamp: ModelIntFilterInput
  orderType: ModelStringFilterInput
  totalCost: ModelFloatFilterInput
  sent: ModelBooleanFilterInput
  acknowledged: ModelBooleanFilterInput
  shipped: ModelBooleanFilterInput
  received: ModelBooleanFilterInput
  paid: ModelBooleanFilterInput
  and: [ModelOrderCartsFilterInput]
  or: [ModelOrderCartsFilterInput]
  not: ModelOrderCartsFilterInput
}

input CreateOrderCartsInput {
  id: ID
  location: String!
  supplyOrderID: ID
  supplyOrderTimestamp: AWSTimestamp
  orderType: String
  totalCost: Float
  sent: Boolean
  acknowledged: Boolean
  shipped: Boolean
  received: Boolean
  paid: Boolean
}

input UpdateOrderCartsInput {
  id: ID!
  location: String
  supplyOrderID: ID
  supplyOrderTimestamp: AWSTimestamp
  orderType: String
  totalCost: Float
  sent: Boolean
  acknowledged: Boolean
  shipped: Boolean
  received: Boolean
  paid: Boolean
}

input DeleteOrderCartsInput {
  id: ID
}

type ModelInventoryCartsConnection {
  items: [InventoryCarts]
  nextToken: String
}

input ModelInventoryCartsFilterInput {
  location: ModelStringFilterInput
  completed: ModelBooleanFilterInput
  and: [ModelInventoryCartsFilterInput]
  or: [ModelInventoryCartsFilterInput]
  not: ModelInventoryCartsFilterInput
}

input CreateInventoryCartsInput {
  location: String!
  completed: Boolean!
  inventoryCartsIdId: ID
}

input UpdateInventoryCartsInput {
  location: String
  completed: Boolean
  inventoryCartsIdId: ID
}

input DeleteInventoryCartsInput {
  id: ID
}

type ModelInventoryCountItemsConnection {
  items: [InventoryCountItems]
  nextToken: String
}

input ModelInventoryCountItemsFilterInput {
  id: ModelIDFilterInput
  quantityLeft: ModelFloatFilterInput
  version: ModelIntFilterInput
  and: [ModelInventoryCountItemsFilterInput]
  or: [ModelInventoryCountItemsFilterInput]
  not: ModelInventoryCountItemsFilterInput
}

input CreateInventoryCountItemsInput {
  id: ID
  quantityLeft: [Float!]
  inventoryCountItemsInventoryCartIDId: ID
  inventoryCountItemsProductIDId: ID
}

input UpdateInventoryCountItemsInput {
  id: ID!
  quantityLeft: [Float!]
  version: Int
  inventoryCountItemsInventoryCartIDId: ID
  inventoryCountItemsProductIDId: ID
  expectedVersion: Int!
}

input DeleteInventoryCountItemsInput {
  id: ID
  expectedVersion: Int!
}

input SearchableStringFilterInput {
  ne: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
}

input SearchableIDFilterInput {
  ne: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableProductsFilterInput {
  id: SearchableIDFilterInput
  location: SearchableStringFilterInput
  price: SearchableFloatFilterInput
  parValue: SearchableFloatFilterInput
  packSize: SearchableStringFilterInput
  storageType: SearchableStringFilterInput
  supplier: SearchableStringFilterInput
  brand: SearchableStringFilterInput
  unit: SearchableStringFilterInput
  itemNumber: SearchableIntFilterInput
  description: SearchableStringFilterInput
  commonField: SearchableStringFilterInput
  and: [SearchableProductsFilterInput]
  or: [SearchableProductsFilterInput]
  not: SearchableProductsFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableProductsSortableFields {
  id
  location
  price
  parValue
  packSize
  storageType
  supplier
  brand
  unit
  itemNumber
  description
  commonField
}

input SearchableProductsSortInput {
  field: SearchableProductsSortableFields
  direction: SearchableSortDirection
}

type SearchableProductsConnection {
  items: [Products]
  nextToken: String
}
