type InventoryItem {
  franchise: String
  location: String
  item: String
  itemNumber: Int
  storage: String
  category: String
  quantity: String
  packSize: String
  units: String
  brand: String
  supplier: String
  parValue: String
  id: String
}

type UserLocations {
  user: String!
  franchise: String
  location: String
  longitude: Float
  latitude: Float
  units: AWSJSON
  storageTypes: AWSJSON
  brands: AWSJSON
  suppliers: AWSJSON
  id: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelInventoryItemConnection {
  items: [InventoryItem]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelInventoryItemFilterInput {
  franchise: ModelStringFilterInput
  location: ModelStringFilterInput
  item: ModelStringFilterInput
  itemNumber: ModelIntFilterInput
  storage: ModelStringFilterInput
  category: ModelStringFilterInput
  quantity: ModelStringFilterInput
  packSize: ModelStringFilterInput
  units: ModelStringFilterInput
  brand: ModelStringFilterInput
  supplier: ModelStringFilterInput
  parValue: ModelStringFilterInput
  id: ModelStringFilterInput
  and: [ModelInventoryItemFilterInput]
  or: [ModelInventoryItemFilterInput]
  not: ModelInventoryItemFilterInput
}

type Query {
  getInventoryItem(id: ID!): InventoryItem
  listInventoryItems(filter: ModelInventoryItemFilterInput, limit: Int, nextToken: String): ModelInventoryItemConnection
  getUserLocations(id: ID!): UserLocations
  listUserLocationss(filter: ModelUserLocationsFilterInput, limit: Int, nextToken: String): ModelUserLocationsConnection
}

input CreateInventoryItemInput {
  franchise: String
  location: String
  item: String
  itemNumber: Int
  storage: String
  category: String
  quantity: String
  packSize: String
  units: String
  brand: String
  supplier: String
  parValue: String
  id: ID
}

input UpdateInventoryItemInput {
  franchise: String
  location: String
  item: String
  itemNumber: Int
  storage: String
  category: String
  quantity: String
  packSize: String
  units: String
  brand: String
  supplier: String
  parValue: String
  id: String!
}

input DeleteInventoryItemInput {
  id: ID
}

type Mutation {
  createInventoryItem(input: CreateInventoryItemInput!): InventoryItem
  updateInventoryItem(input: UpdateInventoryItemInput!): InventoryItem
  deleteInventoryItem(input: DeleteInventoryItemInput!): InventoryItem
  createUserLocations(input: CreateUserLocationsInput!): UserLocations
  updateUserLocations(input: UpdateUserLocationsInput!): UserLocations
  deleteUserLocations(input: DeleteUserLocationsInput!): UserLocations
}

type Subscription {
  onCreateInventoryItem: InventoryItem @aws_subscribe(mutations: ["createInventoryItem"])
  onUpdateInventoryItem: InventoryItem @aws_subscribe(mutations: ["updateInventoryItem"])
  onDeleteInventoryItem: InventoryItem @aws_subscribe(mutations: ["deleteInventoryItem"])
  onCreateUserLocations: UserLocations @aws_subscribe(mutations: ["createUserLocations"])
  onUpdateUserLocations: UserLocations @aws_subscribe(mutations: ["updateUserLocations"])
  onDeleteUserLocations: UserLocations @aws_subscribe(mutations: ["deleteUserLocations"])
}

type ModelUserLocationsConnection {
  items: [UserLocations]
  nextToken: String
}

input ModelUserLocationsFilterInput {
  user: ModelStringFilterInput
  franchise: ModelStringFilterInput
  location: ModelStringFilterInput
  longitude: ModelFloatFilterInput
  latitude: ModelFloatFilterInput
  units: ModelStringFilterInput
  storageTypes: ModelStringFilterInput
  brands: ModelStringFilterInput
  suppliers: ModelStringFilterInput
  id: ModelStringFilterInput
  and: [ModelUserLocationsFilterInput]
  or: [ModelUserLocationsFilterInput]
  not: ModelUserLocationsFilterInput
}

input CreateUserLocationsInput {
  user: String!
  franchise: String
  location: String
  longitude: Float
  latitude: Float
  units: AWSJSON
  storageTypes: AWSJSON
  brands: AWSJSON
  suppliers: AWSJSON
  id: ID
}

input UpdateUserLocationsInput {
  user: String
  franchise: String
  location: String
  longitude: Float
  latitude: Float
  units: AWSJSON
  storageTypes: AWSJSON
  brands: AWSJSON
  suppliers: AWSJSON
  id: String!
}

input DeleteUserLocationsInput {
  id: ID
}
