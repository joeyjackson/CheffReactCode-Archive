{"version":3,"sources":["components/StaticMap.js","components/StoreLocator.js","components/Card.js","StateManagement.js","components/CardList.js","components/SearchBar.js","components/helpers.js","graphql/queries.js","graphql/mutations.js","components/CreateInventoryItem.js","components/EditInventoryItem.js","components/LoadingComponent.js","components/InventoryTable.js","aws-exports.js","components/UserCompletionPage.js","components/StorageFilterStepper.js","App.js","reducer.js","index.js","components/dryGoods.jpg","components/packagingCleaning.jpg","components/produce.jpg","components/dairy.jpg","components/protein.jpg"],"names":["StaticMap","props","react_default","a","createElement","react_static_google_map_umd","size","apiKey","zoom","location","lat","toString","lng","Geocode","setApiKey","enableDebug","Card","console","log","mdbreact_esm","style","width","components_StaticMap","latitude","longitude","name","StateContext","createContext","useStateValue","useContext","CardList","_useStateValue","_useStateValue2","Object","slicedToArray","globalStore","cardList","franchiseLocations","map","eachLocation","key","lg","md","paddingTop","paddingBottom","react_router_dom","to","pathname","concat","state","franchise","className","components_Card","SearchBar","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","address","setState","errorMessage","dispatch","type","extractFranchiseAndAddress","selected","indexOf","slice","handleSelect","isGeocoding","geocodeByAddress","then","res","getLatLng","_ref","catch","error","handleCloseClick","handleError","status","clearSuggestions","selectedFranchise","selectedAddress","_this2","_this$state","react_places_autocomplete_dist_default","onChange","value","onSelect","onError","shouldFetchSuggestions","length","_ref2","getInputProps","suggestions","getSuggestionItemProps","placeholder","onClick","suggestion","classes","_len","arguments","args","Array","_key","forEach","arg","push","val","Error","keys","join","classnames","Demo__suggestion-item--active","active","formattedSuggestion","mainText","secondaryText","React","Component","listInventoryItems","updateInventoryItem","CreateInventoryItem","_useState","useState","currentFranchise","currentLocation","item","itemNumber","Math","floor","random","price","storage","quantity","units","brand","supplier","parValue","_useState2","newInventoryItem","setNewInventoryItem","label","outline","valueDefault","getValue","input","newInventoryItemCopy","objectSpread","sm","react_select_browser_esm","isClearable","e","event","hasOwnProperty","unitOptionsCopy","toConsumableArray","unitOptions","eventCopy","__isNew__","handleNewUnitOption","options","storageOptionsCopy","storageOptions","handleNewStorageOption","brandOptionsCopy","brandOptions","handleNewBrandOption","supplierOptionsCopy","supplierOptions","handleNewSupplierOption","color","API","graphql","graphqlOperation","result","EditInventoryItem","inventoryItemToUpdate","id","isSearchable","__typename","mutations","useStyles","makeStyles","theme","progress","margin","spacing","LoadingComponent","loading","CircularProgress","jsPDF","require","InventoryTable","originalData","setOriginalData","_useState3","_useState4","editInventoryModal","setEditInventoryModal","_useState5","_useState6","createInventoryModal","setCreateInventoryModalModal","_React$useState","updateState","forceUpdate","useCallback","useEffect","refreshInventoryItems","setTimeout","storageKeys","storageFilter","tempStorageFilter","eachKey","eq","queries","filter","or","data","nextToken","addNextTokenData","currentData","apply","items","renderEditable","cellInfo","newData","inventoryTableItems","column","Header","floating","ItemID","original","textAlign","index","onBlur","columns","accessor","Cell","material_ui_search_bar_lib_default","hintText","searchString","results","matchSorter","onFocus","maxWidth","es","noDataText","getTdProps","overflow","verticalAlign","inventoryTableLoading","defaultPageSize","pageSizeOptions","onPageChange","pageIndex","renderPageSizeOptions","pageSize","onPageSizeChange","rowsSelectorText","rowsText","dist_react_select_browser_esm","rounded","doc","setFontSize","text","body","eachData","autoTable","startY","head","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","strippedFranchise","split","save","generateSupplyOrder","class","isOpen","toggle","centered","components_CreateInventoryItem","components_EditInventoryItem","awsconfig","aws_project_region","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","extendedIcon","marginRight","UserCompletionPage","localFranchiseLocations","setLocalFranchiseLocations","pushChanges","Promise","resolve","eachItem","Item","eachItemCopy","userEmail","display","alignItems","justifyContent","IconButton","aria-label","splice","Fragment","showPageSizeOptions","components_SearchBar","tempSearchAddress","infinite","addRestaurant","disabled","StorageFilterStepper","dryGoods","duration","flat","currentStorageFilter","src","waves","packagingPaperCleaning","cleaningSupplies","produce","dairy","protein","withAuthenticator","getUserFranchiseLocations","user","listUserLocationss","Auth","currentUserInfo","attributes","email","react_router","exact","path","render","routeProps","components_UserCompletionPage","components_CardList","linkProps","components_StorageFilterStepper","components_InventoryTable","includeGreetings","authenticatorComponents","dist","AmplifyTheme","reducer","action","itemToRemove","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","Amplify","configure","ReactDOM","react_alert","assign","template","AlertTemplate","initialState","children","Provider","useReducer","inventoryItemHasUpdated","MuiThemeProvider_default","src_App_0","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.acf37aa5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { StaticGoogleMap, Marker, Path } from 'react-static-google-map';\r\n\r\nconst StaticMap = props => {\r\n  return (\r\n    <div>\r\n      <StaticGoogleMap\r\n        size=\"400x450\"\r\n        apiKey=\"AIzaSyAojclCkVnINxiSN0uKSLG1Q5RPBvtX9HI\"\r\n        zoom={17}\r\n      >\r\n        <Marker location={props.lat.toString() + ',' + props.lng.toString()} />\r\n      </StaticGoogleMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StaticMap;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Map as Maps } from 'react-store-locator';\r\nimport Geocode from 'react-geocode';\r\nimport Loader from 'react-loader-spinner';\r\nimport useIsMounted from 'ismounted';\r\nimport StaticMap from './StaticMap';\r\n\r\n// set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\r\nGeocode.setApiKey('AIzaSyAojclCkVnINxiSN0uKSLG1Q5RPBvtX9HI');\r\n\r\n// Enable or disable logs. Its optional.\r\nGeocode.enableDebug();\r\n\r\nconst StoreLocator = props => {\r\n  const [coordinates, setCoordinates] = useState({});\r\n  const isMounted = useIsMounted();\r\n\r\n  useEffect(() => {\r\n    const getGeo = async () => {\r\n      Geocode.fromAddress(props.location)\r\n        .then(response => {\r\n          if (isMounted.current) {\r\n            setCoordinates(response.results[0].geometry.location);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n        });\r\n    };\r\n\r\n    getGeo();\r\n    // return controller.abort();\r\n  }, []);\r\n\r\n  if (Object.keys(coordinates).length > 0) {\r\n    return <StaticMap lat={coordinates.lat} lng={coordinates.lng} />;\r\n  } else {\r\n    // console.log(coordinates);\r\n    return <Loader type=\"Puff\" color=\"#00BFFF\" height=\"100\" width=\"100\" />;\r\n  }\r\n};\r\n\r\nexport default StoreLocator;\r\n","import React, { useState, useRef } from 'react';\r\nimport {\r\n  MDBBtn,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardImage,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n  MDBCol\r\n} from 'mdbreact';\r\nimport StoreLocater from './StoreLocator';\r\nimport StaticMap from './StaticMap';\r\n\r\nconst Card = props => {\r\n  console.log(props);\r\n  return (\r\n    <MDBCard style={{ width: '22rem' }}>\r\n      {/* just the map */}\r\n      <StaticMap lat={props.latitude} lng={props.longitude} />\r\n      <MDBCardBody>\r\n        <MDBCardTitle>{props.name}</MDBCardTitle>\r\n        <MDBCardText>{props.location}</MDBCardText>\r\n      </MDBCardBody>\r\n    </MDBCard>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useEffect } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol } from 'mdbreact';\r\nimport Card from './Card';\r\nimport Loader from 'react-loader-spinner';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport { useStateValue } from '../StateManagement';\r\n\r\nconst CardList = () => {\r\n  const [globalStore, dispatch] = useStateValue();\r\n\r\n  const cardList = globalStore.franchiseLocations.map(eachLocation => (\r\n    <MDBCol\r\n      key={eachLocation.location}\r\n      lg=\"4\"\r\n      md=\"6\"\r\n      style={{ paddingTop: '50px', paddingBottom: '50px' }}\r\n    >\r\n      <Link\r\n        to={{\r\n          pathname: `/location/storageFilter/${eachLocation.location}`,\r\n          state: {\r\n            location: eachLocation.location,\r\n            franchise: eachLocation.franchise\r\n          }\r\n        }}\r\n      >\r\n        <div className=\"d-flex justify-content-center\">\r\n          <Card\r\n            location={eachLocation.location}\r\n            name={eachLocation.franchise}\r\n            latitude={eachLocation.latitude}\r\n            longitude={eachLocation.longitude}\r\n          />\r\n        </div>\r\n      </Link>\r\n    </MDBCol>\r\n  ));\r\n\r\n  return <MDBRow>{cardList}</MDBRow>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng\n} from 'react-places-autocomplete';\nimport { classnames } from './helpers';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage: '',\n      latitude: null,\n      longitude: null,\n      isGeocoding: false,\n      selectedFranchise: '',\n      selectedAddress: ''\n    };\n  }\n\n  handleChange = address => {\n    this.setState({\n      latitude: null,\n      longitude: null,\n      errorMessage: ''\n    });\n    this.props.dispatch({\n      type: 'tempSearchAddress',\n      state: address\n    });\n  };\n\n  extractFranchiseAndAddress = selected => {\n    let franchise = '';\n    let address = '';\n    if (selected.indexOf('-') === -1) {\n      franchise = selected.slice(0, selected.indexOf(','));\n      address = selected.slice(selected.indexOf(',') + 2);\n    } else {\n      franchise = selected.slice(0, selected.indexOf('-'));\n      address = selected.slice(selected.indexOf('-') + 2);\n    }\n    this.props.dispatch({\n      type: 'selectedFranchise',\n      state: franchise\n    });\n    this.props.dispatch({\n      type: 'selectedAddress',\n      state: address\n    });\n  };\n\n  handleSelect = selected => {\n    this.setState({ isGeocoding: true });\n    this.props.dispatch({\n      type: 'tempSearchAddress',\n      state: selected\n    });\n    geocodeByAddress(selected)\n      .then(res => getLatLng(res[0]))\n      .then(({ lat, lng }) => {\n        this.setState({\n          latitude: lat,\n          longitude: lng,\n          isGeocoding: false\n        });\n        this.props.dispatch({\n          type: 'selectedCoordinates',\n          state: {\n            lat: lat,\n            lng: lng\n          }\n        });\n\n        this.extractFranchiseAndAddress(selected);\n      })\n      .catch(error => {\n        this.setState({ isGeocoding: false });\n        console.log('error', error); // eslint-disable-line no-console\n      });\n  };\n\n  handleCloseClick = () => {\n    this.setState({\n      latitude: null,\n      longitude: null\n    });\n    this.props.dispatch({\n      type: 'selectedFranchise',\n      state: ''\n    });\n    this.props.dispatch({\n      type: 'selectedAddress',\n      state: ''\n    });\n    this.props.dispatch({\n      type: 'tempSearchAddress',\n      state: ''\n    });\n  };\n\n  handleError = (status, clearSuggestions) => {\n    console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n    this.setState({ errorMessage: status }, () => {\n      clearSuggestions();\n    });\n  };\n\n  render() {\n    const { errorMessage, latitude, longitude, isGeocoding } = this.state;\n    const address = this.props.address;\n    return (\n      <div style={{ paddingBottom: '25px' }}>\n        <PlacesAutocomplete\n          onChange={this.handleChange}\n          value={address}\n          onSelect={this.handleSelect}\n          onError={this.handleError}\n          shouldFetchSuggestions={address.length > 2}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n            return (\n              <div className=\"Demo__search-bar-container\">\n                <div className=\"Demo__search-input-container\">\n                  <input\n                    {...getInputProps({\n                      placeholder: 'Enter the name of your restaurant',\n                      className: 'Demo__search-input'\n                    })}\n                  />\n                  {address.length > 0 && (\n                    <button\n                      className=\"Demo__clear-button\"\n                      onClick={this.handleCloseClick}\n                    >\n                      x\n                    </button>\n                  )}\n                </div>\n                {suggestions.length > 0 && (\n                  <div className=\"Demo__autocomplete-container\">\n                    {suggestions.map(suggestion => {\n                      const className = classnames('Demo__suggestion-item', {\n                        'Demo__suggestion-item--active': suggestion.active\n                      });\n\n                      return (\n                        /* eslint-disable react/jsx-key */\n                        <div\n                          {...getSuggestionItemProps(suggestion, { className })}\n                        >\n                          <strong>\n                            {suggestion.formattedSuggestion.mainText}\n                          </strong>{' '}\n                          <small>\n                            {suggestion.formattedSuggestion.secondaryText}\n                          </small>\n                        </div>\n                      );\n                      /* eslint-enable react/jsx-key */\n                    })}\n                  </div>\n                )}\n              </div>\n            );\n          }}\n        </PlacesAutocomplete>\n        {errorMessage.length > 0 && (\n          <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n        )}\n\n        {latitude &&\n          longitude &&\n          !isGeocoding &&\n          console.log(latitude, longitude)}\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","const isObject = val => {\n  return typeof val === 'object' && val !== null;\n};\n\nexport const classnames = (...args) => {\n  const classes = [];\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      classes.push(arg);\n    } else if (isObject(arg)) {\n      Object.keys(arg).forEach(key => {\n        if (arg[key]) {\n          classes.push(key);\n        }\n      });\n    } else {\n      throw new Error(\n        '`classnames` only accepts string or object as arguments'\n      );\n    }\n  });\n\n  return classes.join(' ');\n};\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getInventoryItem = `query GetInventoryItem($id: ID!) {\n  getInventoryItem(id: $id) {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const listInventoryItems = `query ListInventoryItems(\n  $filter: ModelInventoryItemFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listInventoryItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      franchise\n      location\n      item\n      itemNumber\n      storage\n      category\n      price\n      quantity\n      packSize\n      units\n      brand\n      supplier\n      parValue\n      id\n    }\n    nextToken\n  }\n}\n`;\nexport const getUserLocations = `query GetUserLocations($id: ID!) {\n  getUserLocations(id: $id) {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\nexport const listUserLocationss = `query ListUserLocationss(\n  $filter: ModelUserLocationsFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listUserLocationss(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      user\n      franchise\n      location\n      longitude\n      latitude\n      units\n      storageTypes\n      brands\n      suppliers\n      id\n    }\n    nextToken\n  }\n}\n`;\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createInventoryItem = `mutation CreateInventoryItem($input: CreateInventoryItemInput!) {\n  createInventoryItem(input: $input) {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const updateInventoryItem = `mutation UpdateInventoryItem($input: UpdateInventoryItemInput!) {\n  updateInventoryItem(input: $input) {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const deleteInventoryItem = `mutation DeleteInventoryItem($input: DeleteInventoryItemInput!) {\n  deleteInventoryItem(input: $input) {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const createUserLocations = `mutation CreateUserLocations($input: CreateUserLocationsInput!) {\n  createUserLocations(input: $input) {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\nexport const updateUserLocations = `mutation UpdateUserLocations($input: UpdateUserLocationsInput!) {\n  updateUserLocations(input: $input) {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\nexport const deleteUserLocations = `mutation DeleteUserLocations($input: DeleteUserLocationsInput!) {\n  deleteUserLocations(input: $input) {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  MDBJumbotron,\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBInput\r\n} from 'mdbreact';\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport 'react-table/react-table.css';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport * as queries from '../graphql/queries';\r\nimport * as mutations from '../graphql/mutations';\r\nimport { useStateValue } from '../StateManagement';\r\n\r\nconst CreateInventoryItem = () => {\r\n  const [globalStore, dispatch] = useStateValue();\r\n  const [newInventoryItem, setNewInventoryItem] = useState({\r\n    franchise: globalStore.currentFranchise,\r\n    location: globalStore.currentLocation,\r\n    item: null,\r\n    itemNumber: Math.floor(Math.random() * 6000000 + 1000000),\r\n    price: null,\r\n    storage: null,\r\n    quantity: null,\r\n    units: 'OZ',\r\n    brand: null,\r\n    supplier: null,\r\n    parValue: null\r\n  });\r\n\r\n  const addNewInventoryItem = () => {\r\n    API.graphql(\r\n      graphqlOperation(mutations.createInventoryItem, {\r\n        input: newInventoryItem\r\n      })\r\n    )\r\n      .then(result => {\r\n        console.log(result);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const handleNewStorageOption = event => {\r\n    // if valid event (event will return NULL if selection box is closed)\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let storageOptionsCopy = [...globalStore.storageOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        storageOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'storageOptions',\r\n          state: storageOptionsCopy\r\n        });\r\n      }\r\n\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.storage = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n  const handleNewUnitOption = event => {\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let unitOptionsCopy = [...globalStore.unitOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        unitOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'unitOptions',\r\n          state: unitOptionsCopy\r\n        });\r\n      }\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.units = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n  const handleNewBrandOption = event => {\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let brandOptionsCopy = [...globalStore.brandOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        brandOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'brandOptions',\r\n          state: brandOptionsCopy\r\n        });\r\n      }\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.brand = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n  const handleNewSupplierOption = event => {\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let supplierOptionsCopy = [...globalStore.supplierOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        supplierOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'supplierOptions',\r\n          state: supplierOptionsCopy\r\n        });\r\n      }\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.supplier = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MDBContainer>\r\n      <h3 className=\"display-5\" style={{ paddingTop: '80px' }}>\r\n        <strong>Create New Inventory Item</strong>\r\n      </h3>\r\n      <hr className=\"my-4\" />\r\n      <div\r\n        className=\"d-flex justify-content-center\"\r\n        style={{\r\n          paddingBottom: '50px'\r\n        }}\r\n      >\r\n        <form>\r\n          <MDBInput\r\n            label=\"Item Number\"\r\n            outline\r\n            type=\"number\"\r\n            valueDefault={newInventoryItem.itemNumber}\r\n            getValue={input => {\r\n              let newInventoryItemCopy = { ...newInventoryItem };\r\n              newInventoryItemCopy.itemNumber = input;\r\n              setNewInventoryItem(newInventoryItemCopy);\r\n            }}\r\n          />\r\n          <MDBInput\r\n            label=\"Item Description\"\r\n            outline\r\n            getValue={input => {\r\n              let newInventoryItemCopy = { ...newInventoryItem };\r\n              newInventoryItemCopy.item = input;\r\n              setNewInventoryItem(newInventoryItemCopy);\r\n            }}\r\n          />\r\n          <MDBInput\r\n            label=\"Price\"\r\n            outline\r\n            type=\"number\"\r\n            getValue={input => {\r\n              let newInventoryItemCopy = { ...newInventoryItem };\r\n              newInventoryItemCopy.price = input;\r\n              setNewInventoryItem(newInventoryItemCopy);\r\n            }}\r\n          />\r\n          <MDBRow>\r\n            <MDBCol sm=\"7\">\r\n              <MDBInput\r\n                label=\"Quantity\"\r\n                outline\r\n                type=\"number\"\r\n                getValue={input => {\r\n                  let newInventoryItemCopy = { ...newInventoryItem };\r\n                  newInventoryItemCopy.quantity = input;\r\n                  setNewInventoryItem(newInventoryItemCopy);\r\n                }}\r\n              />\r\n              <MDBInput\r\n                label=\"Par Value\"\r\n                outline\r\n                type=\"number\"\r\n                getValue={input => {\r\n                  let newInventoryItemCopy = { ...newInventoryItem };\r\n                  newInventoryItemCopy.parValue = input;\r\n                  setNewInventoryItem(newInventoryItemCopy);\r\n                }}\r\n              />\r\n            </MDBCol>\r\n            <MDBCol sm=\"5\">\r\n              <label className=\"grey-text\">Units</label>\r\n              <CreatableSelect\r\n                isClearable\r\n                onChange={e => handleNewUnitOption(e)}\r\n                options={globalStore.unitOptions}\r\n                placeholder={'OZ'}\r\n              />\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <br />\r\n          <label className=\"grey-text\">Storage</label>\r\n          <CreatableSelect\r\n            isClearable\r\n            onChange={e => handleNewStorageOption(e)}\r\n            options={globalStore.storageOptions}\r\n            placeholder={'Select/Type Storage'}\r\n          />\r\n          <br />\r\n          <label className=\"grey-text\">Brand</label>\r\n          <CreatableSelect\r\n            isClearable\r\n            onChange={e => handleNewBrandOption(e)}\r\n            options={globalStore.brandOptions}\r\n            placeholder={'Select/Type Brand'}\r\n          />\r\n          <br />\r\n          <label className=\"grey-text\">Supplier</label>\r\n          <CreatableSelect\r\n            isClearable\r\n            onChange={e => handleNewSupplierOption(e)}\r\n            options={globalStore.supplierOptions}\r\n            placeholder={'Select/Type Supplier'}\r\n          />\r\n\r\n          <div className=\"text-center mt-4\">\r\n            <MDBBtn color=\"primary\" onClick={() => addNewInventoryItem()}>\r\n              Create Item\r\n            </MDBBtn>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default CreateInventoryItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  MDBJumbotron,\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBInput\r\n} from 'mdbreact';\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport 'react-table/react-table.css';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport * as queries from '../graphql/queries';\r\nimport * as mutations from '../graphql/mutations';\r\nimport { useStateValue } from '../StateManagement';\r\n\r\nconst EditInventoryItem = () => {\r\n  const [globalStore, dispatch] = useStateValue();\r\n  const [newInventoryItem, setNewInventoryItem] = useState({\r\n    franchise: globalStore.inventoryItemToUpdate.franchise,\r\n    id: globalStore.inventoryItemToUpdate.id,\r\n    location: globalStore.inventoryItemToUpdate.location,\r\n    item: globalStore.inventoryItemToUpdate.item,\r\n    itemNumber: globalStore.inventoryItemToUpdate.itemNumber,\r\n    price: globalStore.inventoryItemToUpdate.price,\r\n    storage: globalStore.inventoryItemToUpdate.storage,\r\n    quantity: globalStore.inventoryItemToUpdate.quantity,\r\n    units: globalStore.inventoryItemToUpdate.units,\r\n    brand: globalStore.inventoryItemToUpdate.brand,\r\n    supplier: globalStore.inventoryItemToUpdate.supplier,\r\n    parValue: globalStore.inventoryItemToUpdate.parValue\r\n  });\r\n\r\n  console.log(globalStore.inventoryItemToUpdate);\r\n\r\n  const updateInventoryItem = item => {\r\n    console.log(item);\r\n    if ('__typename' in item) {\r\n      delete item.__typename;\r\n    }\r\n    API.graphql(\r\n      graphqlOperation(mutations.updateInventoryItem, {\r\n        input: item\r\n      })\r\n    )\r\n      .then(result => {\r\n        console.log(result);\r\n        // refreshInventoryItems();\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleNewStorageOption = event => {\r\n    // if valid event (event will return NULL if selection box is closed)\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let storageOptionsCopy = [...globalStore.storageOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        storageOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'storageOptions',\r\n          state: storageOptionsCopy\r\n        });\r\n      }\r\n\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.storage = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n  const handleNewUnitOption = event => {\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let unitOptionsCopy = [...globalStore.unitOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        unitOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'unitOptions',\r\n          state: unitOptionsCopy\r\n        });\r\n      }\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.units = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n  const handleNewBrandOption = event => {\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let brandOptionsCopy = [...globalStore.brandOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        brandOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'brandOptions',\r\n          state: brandOptionsCopy\r\n        });\r\n      }\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.brand = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n  const handleNewSupplierOption = event => {\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let supplierOptionsCopy = [...globalStore.supplierOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        supplierOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'supplierOptions',\r\n          state: supplierOptionsCopy\r\n        });\r\n      }\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.supplier = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MDBContainer>\r\n      <h3 className=\"display-5\" style={{ paddingTop: '80px' }}>\r\n        <strong>Create New Inventory Item</strong>\r\n      </h3>\r\n      <hr className=\"my-4\" />\r\n      <div\r\n        className=\"d-flex justify-content-center\"\r\n        style={{\r\n          paddingBottom: '50px'\r\n        }}\r\n      >\r\n        <form>\r\n          <MDBInput\r\n            label=\"Item Number\"\r\n            outline\r\n            type=\"number\"\r\n            valueDefault={newInventoryItem.itemNumber}\r\n            getValue={input => {\r\n              let newInventoryItemCopy = { ...newInventoryItem };\r\n              newInventoryItemCopy.itemNumber = input;\r\n              setNewInventoryItem(newInventoryItemCopy);\r\n            }}\r\n          />\r\n          <MDBInput\r\n            label=\"Item Description\"\r\n            outline\r\n            valueDefault={newInventoryItem.item}\r\n            getValue={input => {\r\n              let newInventoryItemCopy = { ...newInventoryItem };\r\n              newInventoryItemCopy.item = input;\r\n              setNewInventoryItem(newInventoryItemCopy);\r\n            }}\r\n          />\r\n          <MDBInput\r\n            label=\"Price\"\r\n            outline\r\n            type=\"number\"\r\n            valueDefault={newInventoryItem.price}\r\n            getValue={input => {\r\n              let newInventoryItemCopy = { ...newInventoryItem };\r\n              newInventoryItemCopy.price = input;\r\n              setNewInventoryItem(newInventoryItemCopy);\r\n            }}\r\n          />\r\n          <MDBRow>\r\n            <MDBCol sm=\"7\">\r\n              <MDBInput\r\n                label=\"Quantity\"\r\n                outline\r\n                type=\"number\"\r\n                valueDefault={newInventoryItem.quantity}\r\n                getValue={input => {\r\n                  let newInventoryItemCopy = { ...newInventoryItem };\r\n                  newInventoryItemCopy.quantity = input;\r\n                  setNewInventoryItem(newInventoryItemCopy);\r\n                }}\r\n              />\r\n              <MDBInput\r\n                label=\"Par Value\"\r\n                outline\r\n                type=\"number\"\r\n                valueDefault={newInventoryItem.parValue}\r\n                getValue={input => {\r\n                  let newInventoryItemCopy = { ...newInventoryItem };\r\n                  newInventoryItemCopy.parValue = input;\r\n                  setNewInventoryItem(newInventoryItemCopy);\r\n                }}\r\n              />\r\n            </MDBCol>\r\n            <MDBCol sm=\"5\">\r\n              <label className=\"grey-text\">\r\n                <strong>Units</strong>\r\n              </label>\r\n              <CreatableSelect\r\n                isClearable\r\n                isSearchable\r\n                placeholder={newInventoryItem.units}\r\n                onChange={e => handleNewUnitOption(e)}\r\n                options={globalStore.unitOptions}\r\n              />\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <br />\r\n          <label className=\"grey-text\">\r\n            <strong>Storage</strong>\r\n          </label>\r\n          <CreatableSelect\r\n            isClearable\r\n            isSearchable\r\n            placeholder={newInventoryItem.storage}\r\n            onChange={e => handleNewStorageOption(e)}\r\n            options={globalStore.storageOptions}\r\n          />\r\n          <br />\r\n          <label className=\"grey-text\">\r\n            <strong>Brand</strong>\r\n          </label>\r\n          <CreatableSelect\r\n            isClearable\r\n            isSearchable\r\n            placeholder={newInventoryItem.brand}\r\n            onChange={e => handleNewBrandOption(e)}\r\n            options={globalStore.brandOptions}\r\n          />\r\n          <br />\r\n          <label className=\"grey-text\">\r\n            <strong>Supplier</strong>\r\n          </label>\r\n          <CreatableSelect\r\n            isClearable\r\n            isSearchable\r\n            placeholder={newInventoryItem.supplier}\r\n            onChange={e => handleNewSupplierOption(e)}\r\n            options={globalStore.supplierOptions}\r\n          />\r\n\r\n          <div className=\"text-center mt-4\">\r\n            <MDBBtn\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                updateInventoryItem(newInventoryItem);\r\n              }}\r\n            >\r\n              Update Item\r\n            </MDBBtn>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default EditInventoryItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { useStateValue } from '../StateManagement';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  progress: {\r\n    margin: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst LoadingComponent = props => {\r\n  const classes = useStyles();\r\n  return (\r\n    props.loading && (\r\n      <div className=\"-loading -active\">\r\n        <div className=\"-loading-inner\">\r\n          <CircularProgress className={classes.progress} />\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default LoadingComponent;\r\n","/* eslint-disable default-case */\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  MDBJumbotron,\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBDataTable,\r\n  MDBTableEditable,\r\n  MDBInput,\r\n  MDBAnimation,\r\n  MDBModal,\r\n  MDBModalBody,\r\n  MDBModalHeader,\r\n  MDBModalFooter,\r\n  MDBSelect\r\n} from 'mdbreact';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport { Connect } from 'aws-amplify-react';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport * as queries from '../graphql/queries';\r\nimport * as mutations from '../graphql/mutations';\r\nimport * as subscriptions from '../graphql/subscriptions';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { useStateValue } from '../StateManagement';\r\nimport matchSorter from 'match-sorter';\r\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\r\nimport SearchBar from 'material-ui-search-bar';\r\nimport Select from 'react-select';\r\nimport { minHeight } from '@material-ui/system';\r\nimport CreateInventoryItem from './CreateInventoryItem';\r\nimport EditInventoryItem from './EditInventoryItem';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport './Custom.css';\r\n\r\nvar jsPDF = require('jspdf');\r\nrequire('jspdf-autotable');\r\n\r\nconst uuidv1 = require('uuid/v1');\r\n\r\nconst InventoryTable = props => {\r\n  const [originalData, setOriginalData] = useState([]);\r\n  const [editInventoryModal, setEditInventoryModal] = useState(false);\r\n  const [createInventoryModal, setCreateInventoryModalModal] = useState(false);\r\n  const [globalStore, dispatch] = useStateValue();\r\n  const [, updateState] = React.useState();\r\n  const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n  useEffect(() => {\r\n    console.log('mounted');\r\n    dispatch({\r\n      type: 'currentLocation',\r\n      state: props.location\r\n    });\r\n    dispatch({\r\n      type: 'currentFranchise',\r\n      state: props.franchise\r\n    });\r\n    dispatch({\r\n      type: 'inventoryTableLoading',\r\n      state: true\r\n    });\r\n    listInventoryItems();\r\n  }, []);\r\n\r\n  const generateSupplyOrder = () => {\r\n    if (globalStore.inventoryTableItems.length > 0) {\r\n      const doc = new jsPDF();\r\n      doc.setFontSize(25);\r\n      doc.text(65, 20, 'Supply Order Form'); //title\r\n      doc.setFontSize(20);\r\n      doc.text(20, 40, props.franchise);\r\n      doc.setFontSize(15);\r\n      doc.text(20, 50, props.location);\r\n\r\n      let body = [];\r\n      globalStore.inventoryTableItems.map(eachData => {\r\n        body.push([\r\n          eachData.itemNumber,\r\n          eachData.item,\r\n          eachData.price,\r\n          eachData.quantity,\r\n          eachData.parValue,\r\n          eachData.units,\r\n          eachData.storage,\r\n          eachData.brand,\r\n          eachData.supplier\r\n        ]);\r\n      });\r\n\r\n      doc.autoTable({\r\n        startY: 70,\r\n        theme: 'grid',\r\n        head: [\r\n          [\r\n            'Item #',\r\n            'Item',\r\n            'Price',\r\n            'Quantity',\r\n            'Par Value',\r\n            'Units',\r\n            'Storage',\r\n            'Brand',\r\n            'Supplier'\r\n          ]\r\n        ],\r\n        body: body\r\n      });\r\n\r\n      var today = new Date();\r\n      var dd = String(today.getDate()).padStart(2, '0');\r\n      var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n      var yyyy = today.getFullYear();\r\n\r\n      today = mm + '/' + dd + '/' + yyyy;\r\n\r\n      var strippedFranchise = props.franchise.split(' ').join('_');\r\n\r\n      doc.save(`${strippedFranchise}_SupplyOrder_${today}.pdf`);\r\n    }\r\n  };\r\n\r\n  const refreshInventoryItems = () => {\r\n    dispatch({\r\n      type: 'inventoryTableLoading',\r\n      state: true\r\n    });\r\n    setTimeout(listInventoryItems(), 100);\r\n  };\r\n\r\n  const addNextTokenData = (currentData, nextToken, filter) => {\r\n    API.graphql(\r\n      graphqlOperation(queries.listInventoryItems, {\r\n        filter: {\r\n          location: {\r\n            eq: props.location\r\n          },\r\n          or: filter\r\n        },\r\n        nextToken: nextToken\r\n      })\r\n    )\r\n      .then(result => {\r\n        currentData.push(...result.data.listInventoryItems.items);\r\n\r\n        if (result.data.listInventoryItems.nextToken !== null) {\r\n          addNextTokenData(\r\n            currentData,\r\n            result.data.listInventoryItems.nextToken\r\n          );\r\n        } else {\r\n          dispatch({\r\n            type: 'inventoryTableItems',\r\n            state: currentData\r\n          });\r\n          dispatch({\r\n            type: 'inventoryTableLoading',\r\n            state: false\r\n          });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const listInventoryItems = () => {\r\n    let storageKeys = Object.keys(globalStore.storageFilter);\r\n    console.log(globalStore.storageFilter);\r\n    let tempStorageFilter = [];\r\n    storageKeys.map(eachKey => {\r\n      switch (eachKey) {\r\n        case 'dryGoods':\r\n          if (globalStore.storageFilter[eachKey]) {\r\n            tempStorageFilter.push({ storage: { eq: 'Dry Goods' } });\r\n          }\r\n\r\n          break;\r\n        case 'packagingPaperCleaning':\r\n          if (globalStore.storageFilter[eachKey]) {\r\n            tempStorageFilter.push({\r\n              storage: { eq: 'Packaging/Paper/Cleaning' }\r\n            });\r\n          }\r\n          break;\r\n        case 'produce':\r\n          if (globalStore.storageFilter[eachKey]) {\r\n            tempStorageFilter.push({ storage: { eq: 'Produce' } });\r\n          }\r\n          break;\r\n        case 'protein':\r\n          if (globalStore.storageFilter[eachKey]) {\r\n            tempStorageFilter.push({ storage: { eq: 'Protein' } });\r\n          }\r\n          break;\r\n        case 'dairy':\r\n          if (globalStore.storageFilter[eachKey]) {\r\n            tempStorageFilter.push({ storage: { eq: 'Dairy' } });\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    console.log(tempStorageFilter);\r\n\r\n    if (tempStorageFilter.length === 0) {\r\n      tempStorageFilter = [\r\n        { storage: { eq: 'Dry Goods' } },\r\n        { storage: { eq: 'Packaging/Paper/Cleaning' } },\r\n        { storage: { eq: 'Produce' } },\r\n        { storage: { eq: 'Protein' } },\r\n        { storage: { eq: 'Dairy' } }\r\n      ];\r\n    }\r\n\r\n    API.graphql(\r\n      graphqlOperation(queries.listInventoryItems, {\r\n        filter: {\r\n          location: {\r\n            eq: props.location\r\n          },\r\n          or: tempStorageFilter\r\n        }\r\n      })\r\n    )\r\n      .then(result => {\r\n        if (result.data.listInventoryItems.nextToken !== null) {\r\n          console.log(result);\r\n          addNextTokenData(\r\n            result.data.listInventoryItems.items,\r\n            result.data.listInventoryItems.nextToken,\r\n            tempStorageFilter\r\n          );\r\n        } else {\r\n          dispatch({\r\n            type: 'inventoryTableItems',\r\n            state: result.data.listInventoryItems.items\r\n          });\r\n          dispatch({\r\n            type: 'inventoryTableLoading',\r\n            state: false\r\n          });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const updateInventoryItem = item => {\r\n    console.log(item);\r\n    if ('__typename' in item) {\r\n      delete item.__typename;\r\n    }\r\n    API.graphql(\r\n      graphqlOperation(mutations.updateInventoryItem, {\r\n        input: item\r\n      })\r\n    )\r\n      .then(result => {\r\n        console.log(result);\r\n        // refreshInventoryItems();\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const deleteInventoryItem = ItemID => {\r\n    console.log(ItemID);\r\n    API.graphql(\r\n      graphqlOperation(mutations.deleteInventoryItem, {\r\n        input: { id: ItemID }\r\n      })\r\n    )\r\n      .then(result => {\r\n        console.log(result);\r\n        refreshInventoryItems();\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const renderEditable = cellInfo => {\r\n    const newData = [...globalStore.inventoryTableItems];\r\n    switch (cellInfo.column.Header) {\r\n      case 'Action':\r\n        return (\r\n          <div className=\"d-flex justify-content-around\">\r\n            <span>\r\n              <MDBBtn\r\n                className=\"position-relative\"\r\n                color=\"primary\"\r\n                floating\r\n                onClick={() => {\r\n                  deleteInventoryItem(cellInfo.original.id);\r\n                }}\r\n              >\r\n                <i className=\"material-icons\">clear</i>\r\n              </MDBBtn>\r\n            </span>\r\n            <span>\r\n              <MDBBtn\r\n                className=\"position-relative\"\r\n                color=\"primary\"\r\n                floating\r\n                onClick={() => {\r\n                  dispatch({\r\n                    type: 'inventoryItemToUpdate',\r\n                    state: cellInfo.original\r\n                  });\r\n                  setEditInventoryModal(true);\r\n                }}\r\n              >\r\n                <i className=\"material-icons\">edit</i>\r\n              </MDBBtn>\r\n            </span>\r\n          </div>\r\n        );\r\n      case 'Item Description':\r\n        return (\r\n          <MDBContainer style={{ paddingTop: '30px' }}>\r\n            <span className=\"align-middle\">\r\n              <strong>{cellInfo.original[cellInfo.column.id]}</strong>\r\n            </span>\r\n          </MDBContainer>\r\n        );\r\n      case 'Quantity':\r\n        return (\r\n          <MDBInput\r\n            style={{ textAlign: 'center' }}\r\n            size=\"md\"\r\n            type=\"number\"\r\n            valueDefault={cellInfo.original[cellInfo.column.id]}\r\n            getValue={value => {\r\n              newData[cellInfo.index][cellInfo.column.id] = value;\r\n            }}\r\n            onBlur={() => {\r\n              updateInventoryItem(cellInfo.original);\r\n            }}\r\n          />\r\n        );\r\n      case 'Units':\r\n        return (\r\n          <MDBContainer style={{ paddingTop: '30px' }}>\r\n            <span className=\"align-middle\">\r\n              <strong>{cellInfo.original[cellInfo.column.id]}</strong>\r\n            </span>\r\n          </MDBContainer>\r\n        );\r\n\r\n      case 'Storage':\r\n        return (\r\n          <MDBContainer style={{ paddingTop: '30px' }}>\r\n            <span className=\"align-middle\">\r\n              <strong>{cellInfo.original[cellInfo.column.id]}</strong>\r\n            </span>\r\n          </MDBContainer>\r\n        );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      Header: 'Action',\r\n      accessor: 'action',\r\n      Cell: renderEditable,\r\n      width: 200\r\n    },\r\n    {\r\n      Header: 'Item Description',\r\n      accessor: 'item',\r\n      Cell: renderEditable\r\n    },\r\n    {\r\n      Header: 'Quantity',\r\n      accessor: 'quantity',\r\n      Cell: renderEditable,\r\n      width: 125\r\n    },\r\n    {\r\n      Header: 'Units',\r\n      accessor: 'units',\r\n      Cell: renderEditable,\r\n      width: 125\r\n    },\r\n    {\r\n      Header: 'Storage',\r\n      accessor: 'storage',\r\n      Cell: renderEditable,\r\n      width: 300\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <MDBContainer\r\n      className=\"mt-5 text-center\"\r\n      style={{ paddingBottom: '50px' }}\r\n    >\r\n      <div style={{ paddingTop: '50px', paddingBottom: '80px' }}>\r\n        <SearchBar\r\n          hintText=\"Search by item number/description, quantity, storage type, price, brand, or supplier\"\r\n          onChange={searchString => {\r\n            if (searchString === '') {\r\n              dispatch({\r\n                type: 'inventoryTableItems',\r\n                state: originalData\r\n              });\r\n            } else {\r\n              let results = matchSorter(\r\n                globalStore.inventoryTableItems,\r\n                searchString,\r\n                {\r\n                  keys: [\r\n                    'item',\r\n                    'quantity',\r\n                    'storage',\r\n                    'units',\r\n                    'price',\r\n                    'brand',\r\n                    'supplier'\r\n                  ]\r\n                }\r\n              );\r\n              dispatch({\r\n                type: 'inventoryTableItems',\r\n                state: results\r\n              });\r\n            }\r\n          }}\r\n          onBlur={event => {\r\n            dispatch({\r\n              type: 'inventoryTableItems',\r\n              state: originalData\r\n            });\r\n          }}\r\n          onFocus={event => setOriginalData(globalStore.inventoryTableItems)}\r\n          style={{\r\n            margin: '0 auto',\r\n            maxWidth: 800\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <ReactTable\r\n        className=\"-striped -highlight\"\r\n        noDataText={'Inventory has not been setup'}\r\n        columns={columns}\r\n        data={globalStore.inventoryTableItems}\r\n        getTdProps={() => {\r\n          return {\r\n            style: {\r\n              overflow: 'visible',\r\n              verticalAlign: 'middle',\r\n              textAlign: 'center'\r\n            }\r\n          };\r\n        }}\r\n        loading={globalStore.inventoryTableLoading}\r\n        LoadingComponent={LoadingComponent}\r\n        defaultPageSize={10}\r\n        pageSizeOptions={[5, 10, 20, 50, 100]}\r\n        onPageChange={pageIndex => {\r\n          forceUpdate();\r\n        }}\r\n        renderPageSizeOptions={({\r\n          pageSize,\r\n          pageSizeOptions,\r\n          rowsSelectorText,\r\n          onPageSizeChange,\r\n          rowsText\r\n        }) => {\r\n          return (\r\n            <span style={{ width: '150px' }}>\r\n              <Select\r\n                onChange={e => onPageSizeChange(e.value)}\r\n                placeholder={`${pageSize} rows`}\r\n                options={[\r\n                  {\r\n                    value: 5,\r\n                    label: '5 rows'\r\n                  },\r\n                  {\r\n                    value: 10,\r\n                    label: '10 rows'\r\n                  },\r\n                  {\r\n                    value: 20,\r\n                    label: '20 rows'\r\n                  },\r\n                  {\r\n                    value: 50,\r\n                    label: '50 rows'\r\n                  },\r\n                  {\r\n                    value: 100,\r\n                    label: '100 rows'\r\n                  }\r\n                ]}\r\n              />\r\n            </span>\r\n          );\r\n        }}\r\n      />\r\n      <div className=\"d-flex justify-content-around\">\r\n        <MDBBtn\r\n          color=\"primary\"\r\n          rounded\r\n          onClick={() => {\r\n            setCreateInventoryModalModal(!createInventoryModal);\r\n          }}\r\n        >\r\n          Create New Inventory Item\r\n        </MDBBtn>\r\n        <MDBBtn\r\n          color=\"info\"\r\n          rounded\r\n          onClick={() => {\r\n            generateSupplyOrder();\r\n          }}\r\n        >\r\n          Generate Supply Order\r\n        </MDBBtn>\r\n      </div>\r\n      <div className=\"d-flex justify-content-around\">\r\n        <Link\r\n          to={{\r\n            pathname: `/location/storageFilter/${props.location}`,\r\n            state: {\r\n              location: props.location,\r\n              franchise: props.franchise\r\n            }\r\n          }}\r\n        >\r\n          <MDBBtn color=\"primary\" rounded>\r\n            <i class=\"material-icons\">navigate_before</i>\r\n          </MDBBtn>\r\n        </Link>\r\n        <Link\r\n          to={{\r\n            pathname: '/'\r\n          }}\r\n        >\r\n          <MDBBtn color=\"primary\" rounded>\r\n            <i class=\"material-icons\">home</i>\r\n          </MDBBtn>\r\n        </Link>\r\n      </div>\r\n      {/* Create Inventory Modal */}\r\n      <MDBModal\r\n        isOpen={createInventoryModal}\r\n        toggle={() => setCreateInventoryModalModal(!createInventoryModal)}\r\n        centered\r\n        size=\"lg\"\r\n      >\r\n        <MDBModalHeader\r\n          toggle={() => setCreateInventoryModalModal(!createInventoryModal)}\r\n        />\r\n        <MDBModalBody>\r\n          <CreateInventoryItem />\r\n        </MDBModalBody>\r\n        <MDBModalFooter>\r\n          <MDBBtn\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              setCreateInventoryModalModal(!createInventoryModal);\r\n              refreshInventoryItems();\r\n            }}\r\n          >\r\n            Close\r\n          </MDBBtn>\r\n        </MDBModalFooter>\r\n      </MDBModal>\r\n      {/* Edit Inventory Modal */}\r\n      <MDBModal\r\n        isOpen={editInventoryModal}\r\n        toggle={() => setEditInventoryModal(!editInventoryModal)}\r\n        centered\r\n        size=\"lg\"\r\n      >\r\n        <MDBModalHeader\r\n          toggle={() => {\r\n            setEditInventoryModal(!editInventoryModal);\r\n            refreshInventoryItems();\r\n          }}\r\n        />\r\n        <MDBModalBody>\r\n          <EditInventoryItem />\r\n        </MDBModalBody>\r\n        <MDBModalFooter>\r\n          <MDBBtn\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              setEditInventoryModal(!editInventoryModal);\r\n              refreshInventoryItems();\r\n            }}\r\n          >\r\n            Close\r\n          </MDBBtn>\r\n        </MDBModalFooter>\r\n      </MDBModal>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default InventoryTable;\r\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\r\n\r\nconst awsconfig = {\r\n  aws_project_region: 'us-east-2',\r\n  aws_cognito_identity_pool_id:\r\n    'us-east-2:8c1fe34b-e786-4999-b6b8-02b7ce6ffbdf',\r\n  aws_cognito_region: 'us-east-2',\r\n  aws_user_pools_id: 'us-east-2_9AlobejmS',\r\n  aws_user_pools_web_client_id: '2bmf1sp9pf622o5r8egl23qgki',\r\n  aws_appsync_graphqlEndpoint:\r\n    'https://46yagyum2nabbnl4qfbvw7qulm.appsync-api.us-east-2.amazonaws.com/graphql',\r\n  aws_appsync_region: 'us-east-2',\r\n  aws_appsync_authenticationType: 'AMAZON_COGNITO_USER_POOLS'\r\n};\r\n\r\nexport default awsconfig;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  MDBJumbotron,\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBDataTable,\r\n  MDBTableEditable,\r\n  MDBInput,\r\n  MDBSelect,\r\n  MDBAnimation\r\n} from 'mdbreact';\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\nimport SearchBar from './SearchBar';\r\nimport awsconfig from '../aws-exports.js';\r\nimport * as queries from '../graphql/queries';\r\nimport * as mutations from '../graphql/mutations';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useStateValue } from '../StateManagement';\r\nimport Select from 'react-select';\r\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  margin: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nconst UserCompletionPage = () => {\r\n  const [localFranchiseLocations, setLocalFranchiseLocations] = useState([]);\r\n  const [globalStore, dispatch] = useStateValue();\r\n\r\n  const classes = useStyles();\r\n\r\n  const createUserFranchiseLocations = Item => {\r\n    API.graphql(\r\n      graphqlOperation(mutations.createUserLocations, {\r\n        input: Item\r\n      })\r\n    )\r\n      .then(result => {\r\n        console.log(result);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const pushChanges = () => {\r\n    new Promise(resolve => {\r\n      localFranchiseLocations.map(eachItem => {\r\n        let eachItemCopy = { ...eachItem };\r\n        eachItemCopy['user'] = globalStore.userEmail;\r\n        console.log(eachItemCopy);\r\n        createUserFranchiseLocations(eachItemCopy);\r\n      });\r\n      dispatch({\r\n        type: 'franchiseLocations',\r\n        state: localFranchiseLocations\r\n      });\r\n      resolve();\r\n    });\r\n  };\r\n\r\n  const addRestaurant = () => {\r\n    let newData = [...localFranchiseLocations];\r\n    console.log(localFranchiseLocations);\r\n    newData.push({\r\n      franchise: globalStore.selectedFranchise,\r\n      location: globalStore.selectedAddress,\r\n      latitude: globalStore.latitude,\r\n      longitude: globalStore.longitude\r\n    });\r\n    dispatch({\r\n      type: 'selectedFranchise',\r\n      state: ''\r\n    });\r\n    dispatch({\r\n      type: 'selectedAddress',\r\n      state: ''\r\n    });\r\n    dispatch({\r\n      type: 'tempSearchAddress',\r\n      state: ''\r\n    });\r\n    setLocalFranchiseLocations(newData);\r\n  };\r\n\r\n  const renderEditable = cellInfo => {\r\n    const newData = [...localFranchiseLocations];\r\n    console.log(cellInfo);\r\n    if (cellInfo.column.Header === 'Franchise') {\r\n      return (\r\n        <MDBRow\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n          }}\r\n        >\r\n          <MDBCol size=\"2\">\r\n            <IconButton\r\n              aria-label=\"Delete\"\r\n              className={classes.margin}\r\n              onClick={() => {\r\n                let newData = [...localFranchiseLocations];\r\n                console.log(newData);\r\n                newData.splice(cellInfo.index, 1);\r\n                console.log(newData);\r\n                setLocalFranchiseLocations(newData);\r\n              }}\r\n            >\r\n              <i className=\"material-icons\">clear</i>\r\n            </IconButton>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBInput\r\n              style={{ textAlign: 'center' }}\r\n              size=\"sm\"\r\n              valueDefault={cellInfo.original[cellInfo.column.id]}\r\n              getValue={value => {\r\n                newData[cellInfo.index][cellInfo.column.id] = value;\r\n              }}\r\n              onBlur={() => {\r\n                setLocalFranchiseLocations(newData);\r\n              }}\r\n            />\r\n          </MDBCol>\r\n        </MDBRow>\r\n      );\r\n    } else {\r\n      return (\r\n        <MDBInput\r\n          style={{ textAlign: 'center' }}\r\n          size=\"sm\"\r\n          valueDefault={cellInfo.original[cellInfo.column.id]}\r\n          getValue={value => {\r\n            newData[cellInfo.index][cellInfo.column.id] = value;\r\n          }}\r\n          onBlur={() => {\r\n            setLocalFranchiseLocations(newData);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      Header: 'Franchise',\r\n      accessor: 'franchise',\r\n      Cell: renderEditable\r\n    },\r\n    {\r\n      Header: 'Location',\r\n      accessor: 'location',\r\n      Cell: renderEditable\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <MDBContainer\r\n      className=\"mt-5 text-center\"\r\n      style={{ paddingBottom: '50px' }}\r\n    >\r\n      <h1 className=\"display-5\">\r\n        <strong>First Time Setup</strong>\r\n      </h1>\r\n      <hr className=\"my-5\" />\r\n\r\n      {localFranchiseLocations.length === 0 ? (\r\n        <p className=\"lead\" style={{ paddingBottom: '25px' }}>\r\n          You currently have no restaurants associated with your account.\r\n        </p>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      <ReactTable\r\n        className=\"-striped -highlight\"\r\n        columns={columns}\r\n        data={localFranchiseLocations}\r\n        pageSize={5}\r\n        pageSizeOptions={[5, 10, 20, 50, 100]}\r\n        showPageSizeOptions={true}\r\n        noDataText={'No locations setup yet'}\r\n        renderPageSizeOptions={({\r\n          pageSize,\r\n          pageSizeOptions,\r\n          rowsSelectorText,\r\n          onPageSizeChange,\r\n          rowsText\r\n        }) => {\r\n          return (\r\n            <span style={{ width: '150px' }}>\r\n              <Select\r\n                onChange={e => onPageSizeChange(e.value)}\r\n                placeholder={`${pageSize} rows`}\r\n                options={[\r\n                  {\r\n                    value: 5,\r\n                    label: '5 rows'\r\n                  },\r\n                  {\r\n                    value: 10,\r\n                    label: '10 rows'\r\n                  },\r\n                  {\r\n                    value: 20,\r\n                    label: '20 rows'\r\n                  }\r\n                ]}\r\n              />\r\n            </span>\r\n          );\r\n        }}\r\n        // do this to force the next page to update properly, there is a bug and this is the only workaround I could figure out\r\n        onPageChange={pageIndex => {\r\n          const newData = [...localFranchiseLocations];\r\n          setLocalFranchiseLocations(newData);\r\n        }}\r\n      />\r\n      <p className=\"lead\" style={{ paddingTop: '50px' }}>\r\n        Start typing the name of your restaurant below and choose from the list\r\n        provided.\r\n      </p>\r\n\r\n      <SearchBar dispatch={dispatch} address={globalStore.tempSearchAddress} />\r\n      <div className=\"d-flex justify-content-between\">\r\n        {globalStore.selectedFranchise !== '' ? (\r\n          <MDBAnimation type=\"pulse\" infinite>\r\n            <MDBBtn color=\"primary\" rounded onClick={() => addRestaurant()}>\r\n              Add Restaurant\r\n            </MDBBtn>\r\n          </MDBAnimation>\r\n        ) : (\r\n          <MDBBtn color=\"primary\" rounded disabled>\r\n            Add Restaurant\r\n          </MDBBtn>\r\n        )}\r\n\r\n        {localFranchiseLocations.length > 0 ? (\r\n          <MDBAnimation type=\"pulse\" infinite>\r\n            <MDBBtn color=\"success\" rounded onClick={() => pushChanges()}>\r\n              Done\r\n            </MDBBtn>\r\n          </MDBAnimation>\r\n        ) : (\r\n          <MDBBtn color=\"success\" rounded disabled>\r\n            Done\r\n          </MDBBtn>\r\n        )}\r\n      </div>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default UserCompletionPage;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBBtn,\r\n  MDBAnimation,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardImage\r\n} from 'mdbreact';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport { useStateValue } from '../StateManagement';\r\nimport dryGoods from './dryGoods.jpg';\r\nimport cleaningSupplies from './packagingCleaning.jpg';\r\nimport produce from './produce.jpg';\r\nimport dairy from './dairy.jpg';\r\nimport protein from './protein.jpg';\r\nconst StorageFilterStepper = props => {\r\n  const [globalStore, dispatch] = useStateValue();\r\n  console.log(globalStore.storageFilter);\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"d-flex justify-content-around flex-wrap bd-highlight example-parent\"\r\n        style={{ paddingBottom: '50px' }}\r\n      >\r\n        {globalStore.storageFilter.dryGoods ? (\r\n          <MDBAnimation type=\"pulse\" infinite duration=\"2s\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              color=\"primary\"\r\n              flat\r\n              onClick={() => {\r\n                let currentStorageFilter = globalStore.storageFilter;\r\n                currentStorageFilter.dryGoods = false;\r\n                dispatch({\r\n                  type: 'storageFilter',\r\n                  state: currentStorageFilter\r\n                });\r\n              }}\r\n            >\r\n              <MDBCard style={{ width: '22rem' }}>\r\n                <MDBCardImage className=\"img-fluid\" src={dryGoods} waves />\r\n                <MDBCardBody>\r\n                  <h5>Dry Goods</h5>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBBtn>\r\n          </MDBAnimation>\r\n        ) : (\r\n          <MDBBtn\r\n            size=\"lg\"\r\n            outline\r\n            flat\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              let currentStorageFilter = globalStore.storageFilter;\r\n              currentStorageFilter.dryGoods = true;\r\n\r\n              dispatch({\r\n                type: 'storageFilter',\r\n                state: currentStorageFilter\r\n              });\r\n            }}\r\n          >\r\n            <MDBCard style={{ width: '22rem' }}>\r\n              <MDBCardImage className=\"img-fluid\" src={dryGoods} waves />\r\n              <MDBCardBody>\r\n                <h5>Dry Goods</h5>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBBtn>\r\n        )}\r\n\r\n        {globalStore.storageFilter.packagingPaperCleaning ? (\r\n          <MDBAnimation type=\"pulse\" infinite duration=\"2s\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              color=\"primary\"\r\n              flat\r\n              onClick={() => {\r\n                let currentStorageFilter = globalStore.storageFilter;\r\n                currentStorageFilter.packagingPaperCleaning = false;\r\n                dispatch({\r\n                  type: 'storageFilter',\r\n                  state: currentStorageFilter\r\n                });\r\n              }}\r\n            >\r\n              <MDBCard style={{ width: '22rem' }}>\r\n                <MDBCardImage\r\n                  className=\"img-fluid\"\r\n                  src={cleaningSupplies}\r\n                  waves\r\n                />\r\n                <MDBCardBody>\r\n                  <h5>Packaging/Paper/Cleaning</h5>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBBtn>\r\n          </MDBAnimation>\r\n        ) : (\r\n          <MDBBtn\r\n            size=\"lg\"\r\n            outline\r\n            flat\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              let currentStorageFilter = globalStore.storageFilter;\r\n              currentStorageFilter.packagingPaperCleaning = true;\r\n              dispatch({\r\n                type: 'storageFilter',\r\n                state: currentStorageFilter\r\n              });\r\n            }}\r\n          >\r\n            <MDBCard style={{ width: '22rem' }}>\r\n              <MDBCardImage\r\n                className=\"img-fluid\"\r\n                src={cleaningSupplies}\r\n                waves\r\n              />\r\n              <MDBCardBody>\r\n                <h5>Packaging/Paper/Cleaning</h5>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBBtn>\r\n        )}\r\n\r\n        {globalStore.storageFilter.produce ? (\r\n          <MDBAnimation type=\"pulse\" infinite duration=\"2s\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              color=\"primary\"\r\n              flat\r\n              onClick={() => {\r\n                let currentStorageFilter = globalStore.storageFilter;\r\n                currentStorageFilter.produce = false;\r\n                dispatch({\r\n                  type: 'storageFilter',\r\n                  state: currentStorageFilter\r\n                });\r\n              }}\r\n            >\r\n              <MDBCard style={{ width: '22rem' }}>\r\n                <MDBCardImage className=\"img-fluid\" src={produce} waves />\r\n                <MDBCardBody>\r\n                  <h5>Produce</h5>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBBtn>\r\n          </MDBAnimation>\r\n        ) : (\r\n          <MDBBtn\r\n            size=\"lg\"\r\n            outline\r\n            flat\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              let currentStorageFilter = globalStore.storageFilter;\r\n              currentStorageFilter.produce = true;\r\n              dispatch({\r\n                type: 'storageFilter',\r\n                state: currentStorageFilter\r\n              });\r\n            }}\r\n          >\r\n            <MDBCard style={{ width: '22rem' }}>\r\n              <MDBCardImage className=\"img-fluid\" src={produce} waves />\r\n              <MDBCardBody>\r\n                <h5>Produce</h5>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBBtn>\r\n        )}\r\n\r\n        {globalStore.storageFilter.dairy ? (\r\n          <MDBAnimation type=\"pulse\" infinite duration=\"2s\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              color=\"primary\"\r\n              flat\r\n              onClick={() => {\r\n                let currentStorageFilter = globalStore.storageFilter;\r\n                currentStorageFilter.dairy = false;\r\n                dispatch({\r\n                  type: 'storageFilter',\r\n                  state: currentStorageFilter\r\n                });\r\n              }}\r\n            >\r\n              <MDBCard style={{ width: '22rem' }}>\r\n                <MDBCardImage className=\"img-fluid\" src={dairy} waves />\r\n                <MDBCardBody>\r\n                  <h5>Dairy</h5>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBBtn>\r\n          </MDBAnimation>\r\n        ) : (\r\n          <MDBBtn\r\n            size=\"lg\"\r\n            flat\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              let currentStorageFilter = globalStore.storageFilter;\r\n              currentStorageFilter.dairy = true;\r\n              dispatch({\r\n                type: 'storageFilter',\r\n                state: currentStorageFilter\r\n              });\r\n            }}\r\n          >\r\n            <MDBCard style={{ width: '22rem' }}>\r\n              <MDBCardImage className=\"img-fluid\" src={dairy} waves />\r\n              <MDBCardBody>\r\n                <h5>Dairy</h5>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBBtn>\r\n        )}\r\n\r\n        {globalStore.storageFilter.protein ? (\r\n          <MDBAnimation type=\"pulse\" infinite duration=\"2s\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              color=\"primary\"\r\n              flat\r\n              onClick={() => {\r\n                let currentStorageFilter = globalStore.storageFilter;\r\n                currentStorageFilter.protein = false;\r\n                dispatch({\r\n                  type: 'storageFilter',\r\n                  state: currentStorageFilter\r\n                });\r\n              }}\r\n            >\r\n              <MDBCard style={{ width: '22rem' }}>\r\n                <MDBCardImage className=\"img-fluid\" src={protein} waves />\r\n                <MDBCardBody>\r\n                  <h5>Protein</h5>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBBtn>\r\n          </MDBAnimation>\r\n        ) : (\r\n          <MDBBtn\r\n            size=\"lg\"\r\n            flat\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              let currentStorageFilter = globalStore.storageFilter;\r\n              currentStorageFilter.protein = true;\r\n              dispatch({\r\n                type: 'storageFilter',\r\n                state: currentStorageFilter\r\n              });\r\n            }}\r\n          >\r\n            <MDBCard style={{ width: '22rem' }}>\r\n              <MDBCardImage className=\"img-fluid\" src={protein} waves />\r\n              <MDBCardBody>\r\n                <h5>Protein</h5>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBBtn>\r\n        )}\r\n      </div>\r\n\r\n      <div\r\n        className=\"d-flex justify-content-around\"\r\n        style={{ paddingBottom: '50px' }}\r\n      >\r\n        <Link\r\n          to={{\r\n            pathname: '/'\r\n          }}\r\n        >\r\n          <MDBBtn color=\"primary\" rounded>\r\n            <i class=\"material-icons\">navigate_before</i>\r\n          </MDBBtn>\r\n        </Link>\r\n        <Link\r\n          to={{\r\n            pathname: `/location/inventoryTable/${props.location}`,\r\n            state: {\r\n              location: props.location,\r\n              franchise: props.franchise\r\n            }\r\n          }}\r\n        >\r\n          <MDBBtn color=\"primary\" rounded>\r\n            <i className=\"material-icons\">navigate_next</i>\r\n          </MDBBtn>\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StorageFilterStepper;\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport {\r\n  withAuthenticator,\r\n  AmplifyTheme,\r\n  SignIn,\r\n  Greetings,\r\n  ConfirmSignIn,\r\n  TOTPSetup,\r\n  ForgotPassword,\r\n  Loading,\r\n  RequireNewPassword,\r\n  VerifyContact\r\n} from 'aws-amplify-react'; // or 'aws-amplify-react-native';\r\n\r\nimport CardList from './components/CardList';\r\nimport SearchBar from './components/SearchBar';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport InventoryTable from './components/InventoryTable';\r\nimport './App.css';\r\nimport UserCompletionPage from './components/UserCompletionPage';\r\nimport * as queries from './graphql/queries';\r\nimport { useStateValue } from './StateManagement';\r\nimport StorageFilterStepper from './components/StorageFilterStepper';\r\n\r\n// var scrollIntoView = require('scroll-into-view');\r\n\r\nconst App = () => {\r\n  const [globalStore, dispatch] = useStateValue();\r\n\r\n  const signOut = () => {\r\n    Auth.signOut()\r\n      .then(data => console.log(data))\r\n      .catch(err => console.log(err));\r\n\r\n    // By doing this, you are revoking all the auth tokens(id token, access token and refresh token)\r\n    // which means the user is signed out from all the devices\r\n    // Note: although the tokens are revoked, the AWS credentials will remain valid until they expire (which by default is 1 hour)\r\n    Auth.signOut({ global: true })\r\n      .then(data => console.log(data))\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // Auth.currentUserInfo().then(data => console.log(data));\r\n  const getUserEmail = () => {\r\n    Auth.currentUserInfo().then(data => {\r\n      const userEmail = data.attributes.email;\r\n      getUserFranchiseLocations(userEmail);\r\n    });\r\n  };\r\n\r\n  const getUserFranchiseLocations = userEmail => {\r\n    API.graphql(\r\n      graphqlOperation(queries.listUserLocationss, {\r\n        filter: {\r\n          user: {\r\n            eq: userEmail\r\n          }\r\n        }\r\n      })\r\n    )\r\n      .then(result => {\r\n        dispatch({\r\n          type: 'franchiseLocations',\r\n          state: result.data.listUserLocationss.items\r\n        });\r\n        dispatch({\r\n          type: 'userEmail',\r\n          state: userEmail\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getUserEmail();\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      {/* <IdleTimer\r\n          element={document}\r\n          onActive={() => {\r\n            console.log('user is active');\r\n          }}\r\n          onIdle={() => {\r\n            signOut();\r\n          }}\r\n          debounce={250}\r\n          timeout={30 * 1000 * 60}\r\n        /> */}\r\n\r\n      <Switch>\r\n        {globalStore.userEmail && (\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={routeProps => {\r\n              if (globalStore.franchiseLocations.length === 0) {\r\n                return <UserCompletionPage />;\r\n              } else {\r\n                return <CardList />;\r\n              }\r\n            }}\r\n          />\r\n        )}\r\n        <Route\r\n          path=\"/location/storageFilter/:location\"\r\n          render={linkProps => {\r\n            console.log(linkProps);\r\n\r\n            return (\r\n              <StorageFilterStepper\r\n                location={linkProps.location.state.location}\r\n                franchise={linkProps.location.state.franchise}\r\n              />\r\n            );\r\n          }}\r\n        />\r\n        <Route\r\n          path=\"/location/inventoryTable/:location\"\r\n          render={linkProps => {\r\n            console.log(linkProps);\r\n\r\n            return (\r\n              <InventoryTable\r\n                location={linkProps.location.state.location}\r\n                franchise={linkProps.location.state.franchise}\r\n              />\r\n            );\r\n          }}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default withAuthenticator(App, {\r\n  includeGreetings: true,\r\n  authenticatorComponents: [\r\n    <Greetings />,\r\n    <ConfirmSignIn />,\r\n    <TOTPSetup />,\r\n    <ForgotPassword />,\r\n    <Loading />,\r\n    <RequireNewPassword />,\r\n    <VerifyContact />,\r\n    <SignIn />\r\n  ],\r\n  theme: AmplifyTheme\r\n});\r\n\r\n// const addItem = () =>\r\n//   API.graphql(\r\n//     graphqlOperation(mutations.createInventoryItem, { input: itemDetails })\r\n//   )\r\n//     .then(data => console.log(data))\r\n//     .catch(err => console.log(err));\r\n\r\n// addItem();\r\n\r\n// const [locations, setLocations] = useState({\r\n//   id: 1,\r\n//   lat: 50,\r\n//   lng: 25.3,\r\n//   show: true,\r\n//   name: 'Loading Location...'\r\n// });\r\n\r\n// Configure a custom GraphQL endpoint\r\n// Amplify.configure({\r\n//   API: {\r\n//     graphql_endpoint: awsconfig.aws_appsync_graphqlEndpoint,\r\n//     graphql_endpoint_iam_region: 'us-east-2'\r\n//   }\r\n// });\r\n","const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'franchiseLocations':\r\n      return {\r\n        ...state,\r\n        franchiseLocations: action.state\r\n      };\r\n\r\n    case 'storageOptions':\r\n      return {\r\n        ...state,\r\n        storageOptions: action.state\r\n      };\r\n\r\n    case 'brandOptions':\r\n      return {\r\n        ...state,\r\n        brandOptions: action.state\r\n      };\r\n\r\n    case 'itemToRemove':\r\n      return {\r\n        ...state,\r\n        itemToRemove: action.state\r\n      };\r\n\r\n    case 'supplierOptions':\r\n      return {\r\n        ...state,\r\n        supplierOptions: action.state\r\n      };\r\n\r\n    case 'storageFilter':\r\n      return {\r\n        ...state,\r\n        storageFilter: action.state\r\n      };\r\n\r\n    case 'unitOptions':\r\n      return {\r\n        ...state,\r\n        unitOptions: action.state\r\n      };\r\n    case 'currentLocation':\r\n      return {\r\n        ...state,\r\n        currentLocation: action.state\r\n      };\r\n    case 'currentFranchise':\r\n      return {\r\n        ...state,\r\n        currentFranchise: action.state\r\n      };\r\n    case 'inventoryTableItems':\r\n      return {\r\n        ...state,\r\n        inventoryTableItems: action.state\r\n      };\r\n    case 'inventoryItemToUpdate':\r\n      return {\r\n        ...state,\r\n        inventoryItemToUpdate: action.state\r\n      };\r\n\r\n    case 'inventoryTableLoading':\r\n      return {\r\n        ...state,\r\n        inventoryTableLoading: action.state\r\n      };\r\n    case 'selectedFranchise':\r\n      return {\r\n        ...state,\r\n        selectedFranchise: action.state\r\n      };\r\n\r\n    case 'selectedAddress':\r\n      return {\r\n        ...state,\r\n        selectedAddress: action.state\r\n      };\r\n    case 'tempSearchAddress':\r\n      return {\r\n        ...state,\r\n        tempSearchAddress: action.state\r\n      };\r\n    case 'userEmail':\r\n      return {\r\n        ...state,\r\n        userEmail: action.state\r\n      };\r\n    case 'selectedCoordinates':\r\n      return {\r\n        ...state,\r\n        latitude: action.state.lat,\r\n        longitude: action.state.lng\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport './assets/scss/mdb.scss';\r\nimport App from './App';\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert';\r\nimport { StateProvider } from './StateManagement.js';\r\nimport AlertTemplate from 'react-alert-template-basic';\r\nimport reducer from './reducer'; // reducer used for global state management\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport awsconfig from './aws-exports.js';\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\n// optional cofiguration\r\nconst options = {\r\n  // you can also just use 'bottom center'\r\n  position: positions.BOTTOM_CENTER,\r\n  timeout: 5000,\r\n  offset: '200px',\r\n  // you can also just use 'scale'\r\n  transition: transitions.SCALE\r\n};\r\n\r\n// initial global store\r\nconst initialState = {\r\n  franchiseLocations: [], // stores our user's franchise and locations\r\n  storageOptions: [\r\n    {\r\n      value: 'Dry Goods',\r\n      label: 'Dry Goods'\r\n    },\r\n    {\r\n      value: 'Packaging/Paper/Cleaning',\r\n      label: 'Packaging/Paper/Cleaning'\r\n    },\r\n    {\r\n      value: 'Produce',\r\n      label: 'Produce'\r\n    },\r\n    {\r\n      value: 'Dairy',\r\n      label: 'Dairy'\r\n    },\r\n    {\r\n      value: 'Protein',\r\n      label: 'Protein'\r\n    }\r\n  ],\r\n  unitOptions: [\r\n    {\r\n      value: 'OZ',\r\n      label: 'OZ'\r\n    },\r\n    {\r\n      value: 'LB',\r\n      label: 'LB'\r\n    },\r\n    {\r\n      value: 'CT',\r\n      label: 'CT'\r\n    },\r\n    {\r\n      value: 'GM',\r\n      label: 'GM'\r\n    },\r\n    {\r\n      value: 'AV',\r\n      label: 'AV'\r\n    },\r\n    {\r\n      value: 'GA',\r\n      label: 'GA'\r\n    }\r\n  ],\r\n  supplierOptions: [],\r\n  brandOptions: [],\r\n  storageFilter: {\r\n    dryGoods: false,\r\n    packagingPaperCleaning: false,\r\n    produce: false,\r\n    dairy: false,\r\n    protein: false\r\n  },\r\n  tempSearchAddress: '', // for Google API Search Bar\r\n  selectedFranchise: '',\r\n  selectedAddress: '',\r\n  currentLocation: '',\r\n  currentFranchise: '',\r\n  inventoryTableLoading: true,\r\n  inventoryTableItems: [],\r\n  inventoryItemHasUpdated: false\r\n};\r\n\r\nAmplify.configure(awsconfig);\r\n\r\nReactDOM.render(\r\n  <AlertProvider template={AlertTemplate} {...options}>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <MuiThemeProvider>\r\n        <App />\r\n      </MuiThemeProvider>\r\n    </StateProvider>\r\n  </AlertProvider>,\r\n  document.getElementById('root')\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/dryGoods.d164cc7e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/packagingCleaning.2353df13.jpg\";","module.exports = __webpack_public_path__ + \"static/media/produce.aff80969.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dairy.8415a217.jpg\";","module.exports = __webpack_public_path__ + \"static/media/protein.bab7032e.jpg\";"],"sourceRoot":""}