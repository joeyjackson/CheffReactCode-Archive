{"version":3,"sources":["components/StaticMap.js","components/StoreLocator.js","components/Card.js","StateManagement.js","components/CardList.js","components/SearchBar.js","components/helpers.js","graphql/mutations.js","components/CreateInventoryItem.js","components/LoadingComponent.js","components/InventoryTable.js","graphql/queries.js","graphql/subscriptions.js","aws-exports.js","components/UserCompletionPage.js","App.js","reducer.js","index.js"],"names":["StaticMap","props","react_default","a","createElement","react_static_google_map_umd","size","apiKey","zoom","location","lat","toString","lng","Geocode","setApiKey","enableDebug","Card","console","log","mdbreact_esm","style","width","components_StaticMap","latitude","longitude","name","StateContext","createContext","useStateValue","useContext","CardList","_useStateValue","_useStateValue2","Object","slicedToArray","globalStore","zoneInfoObject","franchiseLocations","cardList","map","eachLocation","key","lg","md","paddingTop","paddingBottom","react_router_dom","to","pathname","concat","state","franchise","className","components_Card","SearchBar","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","address","setState","errorMessage","dispatch","type","extractFranchiseAndAddress","selected","indexOf","slice","handleSelect","isGeocoding","geocodeByAddress","then","res","getLatLng","_ref","catch","error","handleCloseClick","handleError","status","clearSuggestions","selectedFranchise","selectedAddress","_this2","_this$state","react_places_autocomplete_dist_default","onChange","value","onSelect","onError","shouldFetchSuggestions","length","_ref2","getInputProps","suggestions","getSuggestionItemProps","placeholder","onClick","suggestion","classes","_len","arguments","args","Array","_key","forEach","arg","push","val","Error","keys","join","classnames","Demo__suggestion-item--active","active","formattedSuggestion","mainText","secondaryText","React","Component","createInventoryItem","deleteInventoryItem","CreateInventoryItem","_useState","useState","currentFranchise","currentLocation","item","itemNumber","price","storage","quantity","units","brand","supplier","parValue","_useState2","newInventoryItem","setNewInventoryItem","label","outline","getValue","input","newInventoryItemCopy","objectSpread","sm","react_select_browser_esm","isClearable","e","event","hasOwnProperty","unitOptionsCopy","toConsumableArray","unitOptions","eventCopy","__isNew__","handleNewUnitOption","options","storageOptionsCopy","storageOptions","handleNewStorageOption","brandOptionsCopy","brandOptions","handleNewBrandOption","supplierOptionsCopy","supplierOptions","handleNewSupplierOption","color","API","graphql","graphqlOperation","mutations","result","useStyles","makeStyles","theme","progress","margin","spacing","LoadingComponent","loading","CircularProgress","uuidv1","require","InventoryTable","setSearchData","_useState3","_useState4","modalOpen","setModalOpen","forceUpdate","useEffect","updateInventoryItem","__typename","ItemID","id","category","packSize","createFakeItem","renderEditable","cellInfo","newData","inventoryTableItems","column","Header","display","alignItems","justifyContent","flat","original","textAlign","valueDefault","index","onBlur","columns","accessor","Cell","material_ui_search_bar_lib_default","hintText","results","matchSorter","onRequestSearch","maxWidth","dist","query","filter","eq","limit","subscription","onSubscriptionMsg","prev","listInventoryItems","onCreateInventoryItem","items","i","itemToRemove","splice","data","es","noDataText","defaultPageSize","getTdProps","overflow","resolveData","pageSizeOptions","onPageChange","pageIndex","renderPageSizeOptions","pageSize","onPageSizeChange","rowsSelectorText","rowsText","dist_react_select_browser_esm","isOpen","toggle","centered","components_CreateInventoryItem","awsconfig","aws_project_region","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","extendedIcon","marginRight","UserCompletionPage","localFranchiseLocations","setLocalFranchiseLocations","pushChanges","Promise","resolve","eachItem","Item","eachItemCopy","userEmail","IconButton","aria-label","Fragment","showPageSizeOptions","components_SearchBar","tempSearchAddress","infinite","rounded","addRestaurant","disabled","withAuthenticator","getUserFranchiseLocations","user","listUserLocationss","Auth","currentUserInfo","attributes","email","react_router","exact","path","render","routeProps","components_UserCompletionPage","components_CardList","linkProps","components_InventoryTable","includeGreetings","authenticatorComponents","AmplifyTheme","reducer","action","inventoryTableLoading","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","Amplify","configure","ReactDOM","react_alert","assign","template","AlertTemplate","initialState","children","Provider","useReducer","storageFilter","filtered","MuiThemeProvider_default","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a8f3e23b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { StaticGoogleMap, Marker, Path } from 'react-static-google-map';\r\n\r\nconst StaticMap = props => {\r\n  return (\r\n    <div>\r\n      <StaticGoogleMap\r\n        size=\"352x500\"\r\n        apiKey=\"AIzaSyAojclCkVnINxiSN0uKSLG1Q5RPBvtX9HI\"\r\n        zoom={17}\r\n      >\r\n        <Marker location={props.lat.toString() + ',' + props.lng.toString()} />\r\n      </StaticGoogleMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StaticMap;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Map as Maps } from 'react-store-locator';\r\nimport Geocode from 'react-geocode';\r\nimport Loader from 'react-loader-spinner';\r\nimport useIsMounted from 'ismounted';\r\nimport StaticMap from './StaticMap';\r\n\r\n// set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\r\nGeocode.setApiKey('AIzaSyAojclCkVnINxiSN0uKSLG1Q5RPBvtX9HI');\r\n\r\n// Enable or disable logs. Its optional.\r\nGeocode.enableDebug();\r\n\r\nconst StoreLocator = props => {\r\n  const [coordinates, setCoordinates] = useState({});\r\n  const isMounted = useIsMounted();\r\n\r\n  useEffect(() => {\r\n    const getGeo = async () => {\r\n      Geocode.fromAddress(props.location)\r\n        .then(response => {\r\n          if (isMounted.current) {\r\n            setCoordinates(response.results[0].geometry.location);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n        });\r\n    };\r\n\r\n    getGeo();\r\n    // return controller.abort();\r\n  }, []);\r\n\r\n  if (Object.keys(coordinates).length > 0) {\r\n    return <StaticMap lat={coordinates.lat} lng={coordinates.lng} />;\r\n  } else {\r\n    // console.log(coordinates);\r\n    return <Loader type=\"Puff\" color=\"#00BFFF\" height=\"100\" width=\"100\" />;\r\n  }\r\n};\r\n\r\nexport default StoreLocator;\r\n","import React, { useState, useRef } from 'react';\r\nimport {\r\n  MDBBtn,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardImage,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n  MDBCol\r\n} from 'mdbreact';\r\nimport StoreLocater from './StoreLocator';\r\nimport StaticMap from './StaticMap';\r\n\r\nconst Card = props => {\r\n  console.log(props);\r\n  return (\r\n    <MDBCard style={{ width: '22rem' }}>\r\n      {/* just the map */}\r\n      <StaticMap lat={props.latitude} lng={props.longitude} />\r\n      <MDBCardBody>\r\n        <MDBCardTitle>{props.name}</MDBCardTitle>\r\n        <MDBCardText>{props.location}</MDBCardText>\r\n      </MDBCardBody>\r\n    </MDBCard>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useEffect } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol } from 'mdbreact';\r\nimport Card from './Card';\r\nimport Loader from 'react-loader-spinner';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport { useStateValue } from '../StateManagement';\r\n\r\nconst CardList = () => {\r\n  const [globalStore, dispatch] = useStateValue();\r\n  const zoneInfoObject = globalStore.franchiseLocations;\r\n  console.log(zoneInfoObject);\r\n\r\n  const cardList = zoneInfoObject.map(eachLocation => (\r\n    <MDBCol\r\n      key={eachLocation.location}\r\n      lg=\"4\"\r\n      md=\"6\"\r\n      style={{ paddingTop: '50px', paddingBottom: '50px' }}\r\n    >\r\n      <Link\r\n        to={{\r\n          pathname: `/location/${eachLocation.location}`,\r\n          state: {\r\n            location: eachLocation.location,\r\n            franchise: eachLocation.franchise\r\n          }\r\n        }}\r\n      >\r\n        <div className=\"d-flex justify-content-center\">\r\n          <Card\r\n            location={eachLocation.location}\r\n            name={eachLocation.franchise}\r\n            latitude={eachLocation.latitude}\r\n            longitude={eachLocation.longitude}\r\n          />\r\n        </div>\r\n      </Link>\r\n    </MDBCol>\r\n  ));\r\n\r\n  return <MDBRow>{cardList}</MDBRow>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng\n} from 'react-places-autocomplete';\nimport { classnames } from './helpers';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage: '',\n      latitude: null,\n      longitude: null,\n      isGeocoding: false,\n      selectedFranchise: '',\n      selectedAddress: ''\n    };\n  }\n\n  handleChange = address => {\n    this.setState({\n      latitude: null,\n      longitude: null,\n      errorMessage: ''\n    });\n    this.props.dispatch({\n      type: 'tempSearchAddress',\n      state: address\n    });\n  };\n\n  extractFranchiseAndAddress = selected => {\n    let franchise = '';\n    let address = '';\n    if (selected.indexOf('-') === -1) {\n      franchise = selected.slice(0, selected.indexOf(','));\n      address = selected.slice(selected.indexOf(',') + 2);\n    } else {\n      franchise = selected.slice(0, selected.indexOf('-'));\n      address = selected.slice(selected.indexOf('-') + 2);\n    }\n    this.props.dispatch({\n      type: 'selectedFranchise',\n      state: franchise\n    });\n    this.props.dispatch({\n      type: 'selectedAddress',\n      state: address\n    });\n  };\n\n  handleSelect = selected => {\n    this.setState({ isGeocoding: true });\n    this.props.dispatch({\n      type: 'tempSearchAddress',\n      state: selected\n    });\n    geocodeByAddress(selected)\n      .then(res => getLatLng(res[0]))\n      .then(({ lat, lng }) => {\n        this.setState({\n          latitude: lat,\n          longitude: lng,\n          isGeocoding: false\n        });\n        this.props.dispatch({\n          type: 'selectedCoordinates',\n          state: {\n            lat: lat,\n            lng: lng\n          }\n        });\n\n        this.extractFranchiseAndAddress(selected);\n      })\n      .catch(error => {\n        this.setState({ isGeocoding: false });\n        console.log('error', error); // eslint-disable-line no-console\n      });\n  };\n\n  handleCloseClick = () => {\n    this.setState({\n      latitude: null,\n      longitude: null\n    });\n    this.props.dispatch({\n      type: 'selectedFranchise',\n      state: ''\n    });\n    this.props.dispatch({\n      type: 'selectedAddress',\n      state: ''\n    });\n    this.props.dispatch({\n      type: 'tempSearchAddress',\n      state: ''\n    });\n  };\n\n  handleError = (status, clearSuggestions) => {\n    console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n    this.setState({ errorMessage: status }, () => {\n      clearSuggestions();\n    });\n  };\n\n  render() {\n    const { errorMessage, latitude, longitude, isGeocoding } = this.state;\n    const address = this.props.address;\n    return (\n      <div style={{ paddingBottom: '25px' }}>\n        <PlacesAutocomplete\n          onChange={this.handleChange}\n          value={address}\n          onSelect={this.handleSelect}\n          onError={this.handleError}\n          shouldFetchSuggestions={address.length > 2}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n            return (\n              <div className=\"Demo__search-bar-container\">\n                <div className=\"Demo__search-input-container\">\n                  <input\n                    {...getInputProps({\n                      placeholder: 'Enter the name of your restaurant',\n                      className: 'Demo__search-input'\n                    })}\n                  />\n                  {address.length > 0 && (\n                    <button\n                      className=\"Demo__clear-button\"\n                      onClick={this.handleCloseClick}\n                    >\n                      x\n                    </button>\n                  )}\n                </div>\n                {suggestions.length > 0 && (\n                  <div className=\"Demo__autocomplete-container\">\n                    {suggestions.map(suggestion => {\n                      const className = classnames('Demo__suggestion-item', {\n                        'Demo__suggestion-item--active': suggestion.active\n                      });\n\n                      return (\n                        /* eslint-disable react/jsx-key */\n                        <div\n                          {...getSuggestionItemProps(suggestion, { className })}\n                        >\n                          <strong>\n                            {suggestion.formattedSuggestion.mainText}\n                          </strong>{' '}\n                          <small>\n                            {suggestion.formattedSuggestion.secondaryText}\n                          </small>\n                        </div>\n                      );\n                      /* eslint-enable react/jsx-key */\n                    })}\n                  </div>\n                )}\n              </div>\n            );\n          }}\n        </PlacesAutocomplete>\n        {errorMessage.length > 0 && (\n          <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n        )}\n\n        {latitude &&\n          longitude &&\n          !isGeocoding &&\n          console.log(latitude, longitude)}\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","const isObject = val => {\n  return typeof val === 'object' && val !== null;\n};\n\nexport const classnames = (...args) => {\n  const classes = [];\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      classes.push(arg);\n    } else if (isObject(arg)) {\n      Object.keys(arg).forEach(key => {\n        if (arg[key]) {\n          classes.push(key);\n        }\n      });\n    } else {\n      throw new Error(\n        '`classnames` only accepts string or object as arguments'\n      );\n    }\n  });\n\n  return classes.join(' ');\n};\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createInventoryItem = `mutation CreateInventoryItem($input: CreateInventoryItemInput!) {\n  createInventoryItem(input: $input) {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const updateInventoryItem = `mutation UpdateInventoryItem($input: UpdateInventoryItemInput!) {\n  updateInventoryItem(input: $input) {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const deleteInventoryItem = `mutation DeleteInventoryItem($input: DeleteInventoryItemInput!) {\n  deleteInventoryItem(input: $input) {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const createUserLocations = `mutation CreateUserLocations($input: CreateUserLocationsInput!) {\n  createUserLocations(input: $input) {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\nexport const updateUserLocations = `mutation UpdateUserLocations($input: UpdateUserLocationsInput!) {\n  updateUserLocations(input: $input) {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\nexport const deleteUserLocations = `mutation DeleteUserLocations($input: DeleteUserLocationsInput!) {\n  deleteUserLocations(input: $input) {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  MDBJumbotron,\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBInput\r\n} from 'mdbreact';\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport 'react-table/react-table.css';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport * as queries from '../graphql/queries';\r\nimport * as mutations from '../graphql/mutations';\r\nimport { useStateValue } from '../StateManagement';\r\n\r\nconst CreateInventoryItem = () => {\r\n  const [globalStore, dispatch] = useStateValue();\r\n  const [newInventoryItem, setNewInventoryItem] = useState({\r\n    franchise: globalStore.currentFranchise,\r\n    location: globalStore.currentLocation,\r\n    item: null,\r\n    itemNumber: null,\r\n    price: null,\r\n    storage: null,\r\n    quantity: null,\r\n    units: 'OZ',\r\n    brand: null,\r\n    supplier: null,\r\n    parValue: null\r\n  });\r\n\r\n  const addNewInventoryItem = () => {\r\n    API.graphql(\r\n      graphqlOperation(mutations.createInventoryItem, {\r\n        input: newInventoryItem\r\n      })\r\n    )\r\n      .then(result => {\r\n        console.log(result);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const handleNewStorageOption = event => {\r\n    // if valid event (event will return NULL if selection box is closed)\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let storageOptionsCopy = [...globalStore.storageOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        storageOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'storageOptions',\r\n          state: storageOptionsCopy\r\n        });\r\n      }\r\n\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.storage = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n  const handleNewUnitOption = event => {\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let unitOptionsCopy = [...globalStore.unitOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        unitOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'unitOptions',\r\n          state: unitOptionsCopy\r\n        });\r\n      }\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.units = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n  const handleNewBrandOption = event => {\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let brandOptionsCopy = [...globalStore.brandOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        brandOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'brandOptions',\r\n          state: brandOptionsCopy\r\n        });\r\n      }\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.brand = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n  const handleNewSupplierOption = event => {\r\n    if (event) {\r\n      // if new one is to be created\r\n      if (event.hasOwnProperty('__isNew__')) {\r\n        let supplierOptionsCopy = [...globalStore.supplierOptions];\r\n        let eventCopy = { ...event };\r\n        delete eventCopy.__isNew__;\r\n        supplierOptionsCopy.push(eventCopy);\r\n        dispatch({\r\n          type: 'supplierOptions',\r\n          state: supplierOptionsCopy\r\n        });\r\n      }\r\n      let newInventoryItemCopy = { ...newInventoryItem };\r\n      newInventoryItemCopy.supplier = event.value;\r\n      setNewInventoryItem(newInventoryItemCopy);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MDBContainer>\r\n      <h3 className=\"display-5\" style={{ paddingTop: '80px' }}>\r\n        <strong>Create New Inventory Item</strong>\r\n      </h3>\r\n      <hr className=\"my-4\" />\r\n      <div\r\n        className=\"d-flex justify-content-center\"\r\n        style={{\r\n          paddingBottom: '50px'\r\n        }}\r\n      >\r\n        <form>\r\n          <MDBInput\r\n            label=\"Item Number\"\r\n            outline\r\n            type=\"number\"\r\n            getValue={input => {\r\n              let newInventoryItemCopy = { ...newInventoryItem };\r\n              newInventoryItemCopy.itemNumber = input;\r\n              setNewInventoryItem(newInventoryItemCopy);\r\n            }}\r\n          />\r\n          <MDBInput\r\n            label=\"Item Description\"\r\n            outline\r\n            getValue={input => {\r\n              let newInventoryItemCopy = { ...newInventoryItem };\r\n              newInventoryItemCopy.item = input;\r\n              setNewInventoryItem(newInventoryItemCopy);\r\n            }}\r\n          />\r\n          <MDBInput\r\n            label=\"Price\"\r\n            outline\r\n            type=\"number\"\r\n            getValue={input => {\r\n              let newInventoryItemCopy = { ...newInventoryItem };\r\n              newInventoryItemCopy.price = input;\r\n              setNewInventoryItem(newInventoryItemCopy);\r\n            }}\r\n          />\r\n          <MDBRow>\r\n            <MDBCol sm=\"7\">\r\n              <MDBInput\r\n                label=\"Quantity\"\r\n                outline\r\n                type=\"number\"\r\n                getValue={input => {\r\n                  let newInventoryItemCopy = { ...newInventoryItem };\r\n                  newInventoryItemCopy.quantity = input;\r\n                  setNewInventoryItem(newInventoryItemCopy);\r\n                }}\r\n              />\r\n              <MDBInput\r\n                label=\"Par Value\"\r\n                outline\r\n                type=\"number\"\r\n                getValue={input => {\r\n                  let newInventoryItemCopy = { ...newInventoryItem };\r\n                  newInventoryItemCopy.parValue = input;\r\n                  setNewInventoryItem(newInventoryItemCopy);\r\n                }}\r\n              />\r\n            </MDBCol>\r\n            <MDBCol sm=\"5\">\r\n              <label className=\"grey-text\">Units</label>\r\n              <CreatableSelect\r\n                isClearable\r\n                onChange={e => handleNewUnitOption(e)}\r\n                options={globalStore.unitOptions}\r\n                placeholder={'OZ'}\r\n              />\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <br />\r\n          <label className=\"grey-text\">Storage</label>\r\n          <CreatableSelect\r\n            isClearable\r\n            onChange={e => handleNewStorageOption(e)}\r\n            options={globalStore.storageOptions}\r\n            placeholder={'Select/Type Storage'}\r\n          />\r\n          <br />\r\n          <label className=\"grey-text\">Brand</label>\r\n          <CreatableSelect\r\n            isClearable\r\n            onChange={e => handleNewBrandOption(e)}\r\n            options={globalStore.brandOptions}\r\n            placeholder={'Select/Type Brand'}\r\n          />\r\n          <br />\r\n          <label className=\"grey-text\">Supplier</label>\r\n          <CreatableSelect\r\n            isClearable\r\n            onChange={e => handleNewSupplierOption(e)}\r\n            options={globalStore.supplierOptions}\r\n            placeholder={'Select/Type Supplier'}\r\n          />\r\n\r\n          <div className=\"text-center mt-4\">\r\n            <MDBBtn color=\"primary\" onClick={() => addNewInventoryItem()}>\r\n              Create Item\r\n            </MDBBtn>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default CreateInventoryItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { useStateValue } from '../StateManagement';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  progress: {\r\n    margin: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst LoadingComponent = props => {\r\n  const classes = useStyles();\r\n  return (\r\n    props.loading && (\r\n      <div className=\"-loading -active\">\r\n        <div className=\"-loading-inner\">\r\n          <CircularProgress className={classes.progress} />\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default LoadingComponent;\r\n","/* eslint-disable default-case */\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  MDBJumbotron,\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBDataTable,\r\n  MDBTableEditable,\r\n  MDBInput,\r\n  MDBAnimation,\r\n  MDBModal,\r\n  MDBModalBody,\r\n  MDBModalHeader,\r\n  MDBModalFooter,\r\n  MDBSelect\r\n} from 'mdbreact';\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport { Connect } from 'aws-amplify-react';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport * as queries from '../graphql/queries';\r\nimport * as mutations from '../graphql/mutations';\r\nimport * as subscriptions from '../graphql/subscriptions';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { useStateValue } from '../StateManagement';\r\nimport matchSorter from 'match-sorter';\r\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\r\nimport SearchBar from 'material-ui-search-bar';\r\nimport Select from 'react-select';\r\nimport { minHeight } from '@material-ui/system';\r\nimport CreateInventoryItem from './CreateInventoryItem';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport './Custom.css';\r\n\r\nconst uuidv1 = require('uuid/v1');\r\n\r\nconst useForceUpdate = () => useState()[1];\r\n\r\nconst InventoryTable = props => {\r\n  const [searchData, setSearchData] = useState([]);\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [globalStore, dispatch] = useStateValue();\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  useEffect(() => {\r\n    console.log('mounted');\r\n    dispatch({\r\n      type: 'currentLocation',\r\n      state: props.location\r\n    });\r\n    dispatch({\r\n      type: 'currentFranchise',\r\n      state: props.franchise\r\n    });\r\n    dispatch({\r\n      type: 'itemToRemove',\r\n      state: props.franchise\r\n    });\r\n  }, []);\r\n\r\n  const createFakeItem = () => {\r\n    const id = uuidv1();\r\n    API.graphql(\r\n      graphqlOperation(mutations.createInventoryItem, {\r\n        input: {\r\n          franchise: 'NA',\r\n          location: 'NA',\r\n          item: 'NA',\r\n          itemNumber: 1234,\r\n          storage: 'NA',\r\n          category: 'NA',\r\n          price: 123,\r\n          quantity: 123,\r\n          packSize: 'NA',\r\n          units: 'NA',\r\n          brand: 'NA',\r\n          supplier: 'NA',\r\n          parValue: 'NA',\r\n          id: id\r\n        }\r\n      })\r\n    )\r\n      .then(result => {\r\n        API.graphql(\r\n          graphqlOperation(mutations.deleteInventoryItem, {\r\n            input: { id: id }\r\n          })\r\n        );\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const updateInventoryItem = item => {\r\n    if ('__typename' in item) {\r\n      delete item.__typename;\r\n    }\r\n    API.graphql(\r\n      graphqlOperation(mutations.updateInventoryItem, {\r\n        input: item\r\n      })\r\n    )\r\n      .then(result => {\r\n        console.log(result);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const deleteInventoryItem = ItemID => {\r\n    console.log(ItemID);\r\n    API.graphql(\r\n      graphqlOperation(mutations.deleteInventoryItem, {\r\n        input: { id: ItemID }\r\n      })\r\n    )\r\n      .then(result => {\r\n        createFakeItem();\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const renderEditable = cellInfo => {\r\n    const newData = [...globalStore.inventoryTableItems];\r\n    switch (cellInfo.column.Header) {\r\n      case 'Item Description':\r\n        return (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center'\r\n            }}\r\n          >\r\n            <span>\r\n              <MDBBtn\r\n                className=\"position-relative\"\r\n                flat\r\n                onClick={() => {\r\n                  deleteInventoryItem(cellInfo.original.id);\r\n                }}\r\n              >\r\n                <i className=\"material-icons\">clear</i>\r\n              </MDBBtn>\r\n            </span>\r\n            <span>\r\n              <MDBInput\r\n                style={{ textAlign: 'center' }}\r\n                size=\"md\"\r\n                valueDefault={cellInfo.original[cellInfo.column.id]}\r\n                getValue={value => {\r\n                  newData[cellInfo.index][cellInfo.column.id] = value;\r\n                }}\r\n                onBlur={() => {\r\n                  updateInventoryItem(cellInfo.original);\r\n                }}\r\n              />\r\n            </span>\r\n          </div>\r\n        );\r\n      case 'Quantity':\r\n        return (\r\n          <MDBInput\r\n            style={{ textAlign: 'center' }}\r\n            size=\"md\"\r\n            type=\"number\"\r\n            valueDefault={cellInfo.original[cellInfo.column.id]}\r\n            getValue={value => {\r\n              newData[cellInfo.index][cellInfo.column.id] = value;\r\n            }}\r\n            onBlur={() => {\r\n              updateInventoryItem(cellInfo.original);\r\n            }}\r\n          />\r\n        );\r\n      case 'Units':\r\n        return (\r\n          <MDBSelect\r\n            style={{ textAlign: 'center' }}\r\n            options={globalStore.unitOptions}\r\n            selected={cellInfo.original.units}\r\n            getValue={value => {\r\n              newData[cellInfo.index][cellInfo.column.id] = value[0];\r\n              updateInventoryItem(cellInfo.original);\r\n            }}\r\n          />\r\n        );\r\n\r\n      case 'Storage':\r\n        return (\r\n          <MDBSelect\r\n            options={globalStore.storageOptions}\r\n            selected={cellInfo.original.storage}\r\n            getValue={value => {\r\n              newData[cellInfo.index][cellInfo.column.id] = value[0];\r\n              updateInventoryItem(cellInfo.original);\r\n            }}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      Header: 'Item Description',\r\n      accessor: 'item',\r\n      Cell: renderEditable\r\n    },\r\n    {\r\n      Header: 'Quantity',\r\n      accessor: 'quantity',\r\n      Cell: renderEditable\r\n    },\r\n    {\r\n      Header: 'Units',\r\n      accessor: 'units',\r\n      Cell: renderEditable\r\n    },\r\n    {\r\n      Header: 'Storage',\r\n      accessor: 'storage',\r\n      Cell: renderEditable\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <MDBContainer\r\n      className=\"mt-5 text-center\"\r\n      style={{ paddingBottom: '50px' }}\r\n    >\r\n      <div style={{ paddingTop: '50px', paddingBottom: '80px' }}>\r\n        <SearchBar\r\n          hintText=\"Search by item number/description, quantity, storage type, price, brand, or supplier\"\r\n          onChange={event => {\r\n            let results = matchSorter(globalStore.inventoryTableItems, event, {\r\n              keys: ['item', 'quantity', 'storage']\r\n            });\r\n            setSearchData(results);\r\n          }}\r\n          onRequestSearch={event => console.log(event)}\r\n          style={{\r\n            margin: '0 auto',\r\n            maxWidth: 800\r\n          }}\r\n        />\r\n      </div>\r\n      <Connect\r\n        query={graphqlOperation(queries.listInventoryItems, {\r\n          filter: {\r\n            location: {\r\n              eq: props.location\r\n            }\r\n          },\r\n          limit: 20\r\n        })}\r\n        subscription={graphqlOperation(subscriptions.onCreateInventoryItem)}\r\n        onSubscriptionMsg={(prev, { onCreateInventoryItem }) => {\r\n          var listInventoryItems;\r\n          if ('listInventoryItems' in prev) {\r\n            listInventoryItems = [...prev.listInventoryItems.items];\r\n          } else {\r\n            listInventoryItems = prev;\r\n          }\r\n          console.log(globalStore);\r\n          console.log(listInventoryItems);\r\n          // fake data created so we can remove from the table\r\n          if (onCreateInventoryItem.franchise === 'NA') {\r\n            for (let i = 0; i < listInventoryItems.length; i++) {\r\n              if (listInventoryItems[i].id === globalStore.itemToRemove) {\r\n                listInventoryItems.splice(i, 1);\r\n              }\r\n            }\r\n            console.log(listInventoryItems);\r\n            return listInventoryItems;\r\n          }\r\n          listInventoryItems.push(onCreateInventoryItem);\r\n          return listInventoryItems;\r\n        }}\r\n      >\r\n        {props => {\r\n          console.log(props);\r\n          var data;\r\n          if (props.loading) {\r\n            return (\r\n              <ReactTable\r\n                className=\"-striped -highlight\"\r\n                noDataText={'Inventory has not been setup'}\r\n                columns={columns}\r\n                data={[]}\r\n                defaultPageSize={10}\r\n                loading={props.loading}\r\n                LoadingComponent={LoadingComponent}\r\n              />\r\n            );\r\n          } else {\r\n            if ('listInventoryItems' in props.data) {\r\n              data = props.data.listInventoryItems.items;\r\n            } else {\r\n              data = props.data;\r\n            }\r\n\r\n            return (\r\n              <ReactTable\r\n                className=\"-striped -highlight\"\r\n                noDataText={'Inventory has not been setup'}\r\n                columns={columns}\r\n                data={data}\r\n                getTdProps={() => {\r\n                  return {\r\n                    style: {\r\n                      overflow: 'visible'\r\n                    }\r\n                  };\r\n                }}\r\n                resolveData={data => {\r\n                  dispatch({\r\n                    type: 'inventoryTableItems',\r\n                    state: data\r\n                  });\r\n                  return data;\r\n                }}\r\n                loading={props.loading}\r\n                LoadingComponent={LoadingComponent}\r\n                defaultPageSize={10}\r\n                pageSizeOptions={[5, 10, 20, 50, 100]}\r\n                onPageChange={pageIndex => {\r\n                  forceUpdate();\r\n                }}\r\n                renderPageSizeOptions={({\r\n                  pageSize,\r\n                  pageSizeOptions,\r\n                  rowsSelectorText,\r\n                  onPageSizeChange,\r\n                  rowsText\r\n                }) => {\r\n                  return (\r\n                    <span style={{ width: '150px' }}>\r\n                      <Select\r\n                        onChange={e => onPageSizeChange(e.value)}\r\n                        placeholder={`${pageSize} rows`}\r\n                        options={[\r\n                          {\r\n                            value: 5,\r\n                            label: '5 rows'\r\n                          },\r\n                          {\r\n                            value: 10,\r\n                            label: '10 rows'\r\n                          },\r\n                          {\r\n                            value: 20,\r\n                            label: '20 rows'\r\n                          },\r\n                          {\r\n                            value: 50,\r\n                            label: '50 rows'\r\n                          },\r\n                          {\r\n                            value: 100,\r\n                            label: '100 rows'\r\n                          }\r\n                        ]}\r\n                      />\r\n                    </span>\r\n                  );\r\n                }}\r\n              />\r\n            );\r\n          }\r\n        }}\r\n      </Connect>\r\n\r\n      <MDBBtn\r\n        color=\"primary\"\r\n        onClick={() => {\r\n          setModalOpen(!modalOpen);\r\n        }}\r\n      >\r\n        Create New Inventory Item\r\n      </MDBBtn>\r\n      <MDBModal\r\n        isOpen={modalOpen}\r\n        toggle={() => setModalOpen(!modalOpen)}\r\n        centered\r\n        size=\"lg\"\r\n      >\r\n        <MDBModalHeader toggle={() => setModalOpen(!modalOpen)} />\r\n        <MDBModalBody>\r\n          <CreateInventoryItem />\r\n        </MDBModalBody>\r\n        <MDBModalFooter>\r\n          <MDBBtn color=\"secondary\" onClick={() => setModalOpen(!modalOpen)}>\r\n            Close\r\n          </MDBBtn>\r\n        </MDBModalFooter>\r\n      </MDBModal>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default InventoryTable;\r\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getInventoryItem = `query GetInventoryItem($id: ID!) {\n  getInventoryItem(id: $id) {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const listInventoryItems = `query ListInventoryItems(\n  $filter: ModelInventoryItemFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listInventoryItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      franchise\n      location\n      item\n      itemNumber\n      storage\n      category\n      price\n      quantity\n      packSize\n      units\n      brand\n      supplier\n      parValue\n      id\n    }\n    nextToken\n  }\n}\n`;\nexport const getUserLocations = `query GetUserLocations($id: ID!) {\n  getUserLocations(id: $id) {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\nexport const listUserLocationss = `query ListUserLocationss(\n  $filter: ModelUserLocationsFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listUserLocationss(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      user\n      franchise\n      location\n      longitude\n      latitude\n      units\n      storageTypes\n      brands\n      suppliers\n      id\n    }\n    nextToken\n  }\n}\n`;\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateInventoryItem = `subscription OnCreateInventoryItem {\n  onCreateInventoryItem {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const onUpdateInventoryItem = `subscription OnUpdateInventoryItem {\n  onUpdateInventoryItem {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const onDeleteInventoryItem = `subscription OnDeleteInventoryItem {\n  onDeleteInventoryItem {\n    franchise\n    location\n    item\n    itemNumber\n    storage\n    category\n    price\n    quantity\n    packSize\n    units\n    brand\n    supplier\n    parValue\n    id\n  }\n}\n`;\nexport const onCreateUserLocations = `subscription OnCreateUserLocations {\n  onCreateUserLocations {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\nexport const onUpdateUserLocations = `subscription OnUpdateUserLocations {\n  onUpdateUserLocations {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\nexport const onDeleteUserLocations = `subscription OnDeleteUserLocations {\n  onDeleteUserLocations {\n    user\n    franchise\n    location\n    longitude\n    latitude\n    units\n    storageTypes\n    brands\n    suppliers\n    id\n  }\n}\n`;\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\r\n\r\nconst awsconfig = {\r\n  aws_project_region: 'us-east-2',\r\n  aws_cognito_identity_pool_id:\r\n    'us-east-2:8c1fe34b-e786-4999-b6b8-02b7ce6ffbdf',\r\n  aws_cognito_region: 'us-east-2',\r\n  aws_user_pools_id: 'us-east-2_9AlobejmS',\r\n  aws_user_pools_web_client_id: '2bmf1sp9pf622o5r8egl23qgki',\r\n  aws_appsync_graphqlEndpoint:\r\n    'https://46yagyum2nabbnl4qfbvw7qulm.appsync-api.us-east-2.amazonaws.com/graphql',\r\n  aws_appsync_region: 'us-east-2',\r\n  aws_appsync_authenticationType: 'AMAZON_COGNITO_USER_POOLS'\r\n};\r\n\r\nexport default awsconfig;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  MDBJumbotron,\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBDataTable,\r\n  MDBTableEditable,\r\n  MDBInput,\r\n  MDBSelect,\r\n  MDBAnimation\r\n} from 'mdbreact';\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\nimport SearchBar from './SearchBar';\r\nimport awsconfig from '../aws-exports.js';\r\nimport * as queries from '../graphql/queries';\r\nimport * as mutations from '../graphql/mutations';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useStateValue } from '../StateManagement';\r\nimport Select from 'react-select';\r\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  margin: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nconst UserCompletionPage = () => {\r\n  const [localFranchiseLocations, setLocalFranchiseLocations] = useState([]);\r\n  const [globalStore, dispatch] = useStateValue();\r\n\r\n  const classes = useStyles();\r\n\r\n  const createUserFranchiseLocations = Item => {\r\n    API.graphql(\r\n      graphqlOperation(mutations.createUserLocations, {\r\n        input: Item\r\n      })\r\n    )\r\n      .then(result => {\r\n        console.log(result);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const pushChanges = () => {\r\n    new Promise(resolve => {\r\n      localFranchiseLocations.map(eachItem => {\r\n        let eachItemCopy = { ...eachItem };\r\n        eachItemCopy['user'] = globalStore.userEmail;\r\n        console.log(eachItemCopy);\r\n        createUserFranchiseLocations(eachItemCopy);\r\n      });\r\n      dispatch({\r\n        type: 'franchiseLocations',\r\n        state: localFranchiseLocations\r\n      });\r\n      resolve();\r\n    });\r\n  };\r\n\r\n  const addRestaurant = () => {\r\n    let newData = [...localFranchiseLocations];\r\n    console.log(localFranchiseLocations);\r\n    newData.push({\r\n      franchise: globalStore.selectedFranchise,\r\n      location: globalStore.selectedAddress,\r\n      latitude: globalStore.latitude,\r\n      longitude: globalStore.longitude\r\n    });\r\n    dispatch({\r\n      type: 'selectedFranchise',\r\n      state: ''\r\n    });\r\n    dispatch({\r\n      type: 'selectedAddress',\r\n      state: ''\r\n    });\r\n    dispatch({\r\n      type: 'tempSearchAddress',\r\n      state: ''\r\n    });\r\n    setLocalFranchiseLocations(newData);\r\n  };\r\n\r\n  const renderEditable = cellInfo => {\r\n    const newData = [...localFranchiseLocations];\r\n    console.log(cellInfo);\r\n    if (cellInfo.column.Header === 'Franchise') {\r\n      return (\r\n        <MDBRow\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n          }}\r\n        >\r\n          <MDBCol size=\"2\">\r\n            <IconButton\r\n              aria-label=\"Delete\"\r\n              className={classes.margin}\r\n              onClick={() => {\r\n                let newData = [...localFranchiseLocations];\r\n                console.log(newData);\r\n                newData.splice(cellInfo.index, 1);\r\n                console.log(newData);\r\n                setLocalFranchiseLocations(newData);\r\n              }}\r\n            >\r\n              <i className=\"material-icons\">clear</i>\r\n            </IconButton>\r\n          </MDBCol>\r\n          <MDBCol>\r\n            <MDBInput\r\n              style={{ textAlign: 'center' }}\r\n              size=\"sm\"\r\n              valueDefault={cellInfo.original[cellInfo.column.id]}\r\n              getValue={value => {\r\n                newData[cellInfo.index][cellInfo.column.id] = value;\r\n              }}\r\n              onBlur={() => {\r\n                setLocalFranchiseLocations(newData);\r\n              }}\r\n            />\r\n          </MDBCol>\r\n        </MDBRow>\r\n      );\r\n    } else {\r\n      return (\r\n        <MDBInput\r\n          style={{ textAlign: 'center' }}\r\n          size=\"sm\"\r\n          valueDefault={cellInfo.original[cellInfo.column.id]}\r\n          getValue={value => {\r\n            newData[cellInfo.index][cellInfo.column.id] = value;\r\n          }}\r\n          onBlur={() => {\r\n            setLocalFranchiseLocations(newData);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      Header: 'Franchise',\r\n      accessor: 'franchise',\r\n      Cell: renderEditable\r\n    },\r\n    {\r\n      Header: 'Location',\r\n      accessor: 'location',\r\n      Cell: renderEditable\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <MDBContainer\r\n      className=\"mt-5 text-center\"\r\n      style={{ paddingBottom: '50px' }}\r\n    >\r\n      <h1 className=\"display-5\">\r\n        <strong>First Time Setup</strong>\r\n      </h1>\r\n      <hr className=\"my-5\" />\r\n\r\n      {localFranchiseLocations.length === 0 ? (\r\n        <p className=\"lead\" style={{ paddingBottom: '25px' }}>\r\n          You currently have no restaurants associated with your account.\r\n        </p>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      <ReactTable\r\n        className=\"-striped -highlight\"\r\n        columns={columns}\r\n        data={localFranchiseLocations}\r\n        pageSize={5}\r\n        pageSizeOptions={[5, 10, 20, 50, 100]}\r\n        showPageSizeOptions={true}\r\n        noDataText={'No locations setup yet'}\r\n        renderPageSizeOptions={({\r\n          pageSize,\r\n          pageSizeOptions,\r\n          rowsSelectorText,\r\n          onPageSizeChange,\r\n          rowsText\r\n        }) => {\r\n          return (\r\n            <span style={{ width: '150px' }}>\r\n              <Select\r\n                onChange={e => onPageSizeChange(e.value)}\r\n                placeholder={`${pageSize} rows`}\r\n                options={[\r\n                  {\r\n                    value: 5,\r\n                    label: '5 rows'\r\n                  },\r\n                  {\r\n                    value: 10,\r\n                    label: '10 rows'\r\n                  },\r\n                  {\r\n                    value: 20,\r\n                    label: '20 rows'\r\n                  }\r\n                ]}\r\n              />\r\n            </span>\r\n          );\r\n        }}\r\n        // do this to force the next page to update properly, there is a bug and this is the only workaround I could figure out\r\n        onPageChange={pageIndex => {\r\n          const newData = [...localFranchiseLocations];\r\n          setLocalFranchiseLocations(newData);\r\n        }}\r\n      />\r\n      <p className=\"lead\" style={{ paddingTop: '50px' }}>\r\n        Start typing the name of your restaurant below and choose from the list\r\n        provided.\r\n      </p>\r\n\r\n      <SearchBar dispatch={dispatch} address={globalStore.tempSearchAddress} />\r\n      <div className=\"d-flex justify-content-between\">\r\n        {globalStore.selectedFranchise !== '' ? (\r\n          <MDBAnimation type=\"pulse\" infinite>\r\n            <MDBBtn color=\"primary\" rounded onClick={() => addRestaurant()}>\r\n              Add Restaurant\r\n            </MDBBtn>\r\n          </MDBAnimation>\r\n        ) : (\r\n          <MDBBtn color=\"primary\" rounded disabled>\r\n            Add Restaurant\r\n          </MDBBtn>\r\n        )}\r\n\r\n        {localFranchiseLocations.length > 0 ? (\r\n          <MDBAnimation type=\"pulse\" infinite>\r\n            <MDBBtn color=\"success\" rounded onClick={() => pushChanges()}>\r\n              Done\r\n            </MDBBtn>\r\n          </MDBAnimation>\r\n        ) : (\r\n          <MDBBtn color=\"success\" rounded disabled>\r\n            Done\r\n          </MDBBtn>\r\n        )}\r\n      </div>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default UserCompletionPage;\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport {\r\n  withAuthenticator,\r\n  AmplifyTheme,\r\n  SignIn,\r\n  Greetings,\r\n  ConfirmSignIn,\r\n  TOTPSetup,\r\n  ForgotPassword,\r\n  Loading,\r\n  RequireNewPassword,\r\n  VerifyContact\r\n} from 'aws-amplify-react'; // or 'aws-amplify-react-native';\r\n\r\nimport CardList from './components/CardList';\r\nimport SearchBar from './components/SearchBar';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport InventoryTable from './components/InventoryTable';\r\nimport './App.css';\r\nimport UserCompletionPage from './components/UserCompletionPage';\r\nimport * as queries from './graphql/queries';\r\nimport { useStateValue } from './StateManagement';\r\n\r\n// var scrollIntoView = require('scroll-into-view');\r\n\r\nconst App = () => {\r\n  const [globalStore, dispatch] = useStateValue();\r\n\r\n  const signOut = () => {\r\n    Auth.signOut()\r\n      .then(data => console.log(data))\r\n      .catch(err => console.log(err));\r\n\r\n    // By doing this, you are revoking all the auth tokens(id token, access token and refresh token)\r\n    // which means the user is signed out from all the devices\r\n    // Note: although the tokens are revoked, the AWS credentials will remain valid until they expire (which by default is 1 hour)\r\n    Auth.signOut({ global: true })\r\n      .then(data => console.log(data))\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // Auth.currentUserInfo().then(data => console.log(data));\r\n  const getUserEmail = () => {\r\n    Auth.currentUserInfo().then(data => {\r\n      const userEmail = data.attributes.email;\r\n      getUserFranchiseLocations(userEmail);\r\n    });\r\n  };\r\n\r\n  const getUserFranchiseLocations = userEmail => {\r\n    API.graphql(\r\n      graphqlOperation(queries.listUserLocationss, {\r\n        filter: {\r\n          user: {\r\n            eq: userEmail\r\n          }\r\n        }\r\n      })\r\n    )\r\n      .then(result => {\r\n        dispatch({\r\n          type: 'franchiseLocations',\r\n          state: result.data.listUserLocationss.items\r\n        });\r\n        dispatch({\r\n          type: 'userEmail',\r\n          state: userEmail\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getUserEmail();\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      {/* <IdleTimer\r\n          element={document}\r\n          onActive={() => {\r\n            console.log('user is active');\r\n          }}\r\n          onIdle={() => {\r\n            signOut();\r\n          }}\r\n          debounce={250}\r\n          timeout={30 * 1000 * 60}\r\n        /> */}\r\n\r\n      <Switch>\r\n        {globalStore.userEmail && (\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={routeProps => {\r\n              if (globalStore.franchiseLocations.length === 0) {\r\n                return <UserCompletionPage />;\r\n              } else {\r\n                return <CardList />;\r\n              }\r\n            }}\r\n          />\r\n        )}\r\n        <Route\r\n          path=\"/location/:location\"\r\n          render={linkProps => {\r\n            console.log(linkProps);\r\n            return (\r\n              <InventoryTable\r\n                location={linkProps.location.state.location}\r\n                franchise={linkProps.location.state.franchise}\r\n              />\r\n            );\r\n          }}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default withAuthenticator(App, {\r\n  includeGreetings: true,\r\n  authenticatorComponents: [\r\n    <Greetings />,\r\n    <ConfirmSignIn />,\r\n    <TOTPSetup />,\r\n    <ForgotPassword />,\r\n    <Loading />,\r\n    <RequireNewPassword />,\r\n    <VerifyContact />,\r\n    <SignIn />\r\n  ],\r\n  theme: AmplifyTheme\r\n});\r\n\r\n// const addItem = () =>\r\n//   API.graphql(\r\n//     graphqlOperation(mutations.createInventoryItem, { input: itemDetails })\r\n//   )\r\n//     .then(data => console.log(data))\r\n//     .catch(err => console.log(err));\r\n\r\n// addItem();\r\n\r\n// const [locations, setLocations] = useState({\r\n//   id: 1,\r\n//   lat: 50,\r\n//   lng: 25.3,\r\n//   show: true,\r\n//   name: 'Loading Location...'\r\n// });\r\n\r\n// Configure a custom GraphQL endpoint\r\n// Amplify.configure({\r\n//   API: {\r\n//     graphql_endpoint: awsconfig.aws_appsync_graphqlEndpoint,\r\n//     graphql_endpoint_iam_region: 'us-east-2'\r\n//   }\r\n// });\r\n","const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'franchiseLocations':\r\n      return {\r\n        ...state,\r\n        franchiseLocations: action.state\r\n      };\r\n\r\n    case 'storageOptions':\r\n      return {\r\n        ...state,\r\n        storageOptions: action.state\r\n      };\r\n\r\n    case 'brandOptions':\r\n      return {\r\n        ...state,\r\n        brandOptions: action.state\r\n      };\r\n\r\n    case 'itemToRemove':\r\n      return {\r\n        ...state,\r\n        itemToRemove: action.state\r\n      };\r\n\r\n    case 'supplierOptions':\r\n      return {\r\n        ...state,\r\n        supplierOptions: action.state\r\n      };\r\n\r\n    case 'unitOptions':\r\n      return {\r\n        ...state,\r\n        unitOptions: action.state\r\n      };\r\n    case 'currentLocation':\r\n      return {\r\n        ...state,\r\n        currentLocation: action.state\r\n      };\r\n    case 'currentFranchise':\r\n      return {\r\n        ...state,\r\n        currentFranchise: action.state\r\n      };\r\n    case 'inventoryTableItems':\r\n      return {\r\n        ...state,\r\n        inventoryTableItems: action.state\r\n      };\r\n    case 'inventoryTableLoading':\r\n      return {\r\n        ...state,\r\n        inventoryTableLoading: action.state\r\n      };\r\n    case 'selectedFranchise':\r\n      return {\r\n        ...state,\r\n        selectedFranchise: action.state\r\n      };\r\n\r\n    case 'selectedAddress':\r\n      return {\r\n        ...state,\r\n        selectedAddress: action.state\r\n      };\r\n    case 'tempSearchAddress':\r\n      return {\r\n        ...state,\r\n        tempSearchAddress: action.state\r\n      };\r\n    case 'userEmail':\r\n      return {\r\n        ...state,\r\n        userEmail: action.state\r\n      };\r\n    case 'selectedCoordinates':\r\n      return {\r\n        ...state,\r\n        latitude: action.state.lat,\r\n        longitude: action.state.lng\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport './assets/scss/mdb.scss';\r\nimport App from './App';\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert';\r\nimport { StateProvider } from './StateManagement.js';\r\nimport AlertTemplate from 'react-alert-template-basic';\r\nimport reducer from './reducer'; // reducer used for global state management\r\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport awsconfig from './aws-exports.js';\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\n// optional cofiguration\r\nconst options = {\r\n  // you can also just use 'bottom center'\r\n  position: positions.BOTTOM_CENTER,\r\n  timeout: 5000,\r\n  offset: '200px',\r\n  // you can also just use 'scale'\r\n  transition: transitions.SCALE\r\n};\r\n\r\n// initial global store\r\nconst initialState = {\r\n  franchiseLocations: [], // stores our user's franchise and locations\r\n  storageOptions: [\r\n    {\r\n      value: 'Dry Storage',\r\n      label: 'Dry Storage'\r\n    },\r\n    {\r\n      value: 'Cold Storage',\r\n      label: 'Cold Storage'\r\n    },\r\n    {\r\n      value: 'Freezer',\r\n      label: 'Freezer'\r\n    },\r\n    {\r\n      value: 'Low Velocity',\r\n      label: 'Low Velocity'\r\n    }\r\n  ],\r\n  unitOptions: [\r\n    {\r\n      value: 'OZ',\r\n      label: 'OZ'\r\n    },\r\n    {\r\n      value: 'LB',\r\n      label: 'LB'\r\n    },\r\n    {\r\n      value: 'CT',\r\n      label: 'CT'\r\n    },\r\n    {\r\n      value: 'GM',\r\n      label: 'GM'\r\n    },\r\n    {\r\n      value: 'AV',\r\n      label: 'AV'\r\n    },\r\n    {\r\n      value: 'GA',\r\n      label: 'GA'\r\n    }\r\n  ],\r\n  supplierOptions: [],\r\n  brandOptions: [],\r\n  storageFilter: [\r\n    {\r\n      type: 'Dry Storage',\r\n      filtered: false\r\n    },\r\n    {\r\n      type: 'Cold Storage',\r\n      filtered: false\r\n    },\r\n    {\r\n      type: 'Freezer',\r\n      filtered: false\r\n    },\r\n    {\r\n      type: 'Low  Velocity',\r\n      filtered: false\r\n    }\r\n  ],\r\n  tempSearchAddress: '', // for Google API Search Bar\r\n  selectedFranchise: '',\r\n  selectedAddress: '',\r\n  currentLocation: '',\r\n  currentFranchise: '',\r\n  inventoryTableLoading: true,\r\n  inventoryTableItems: [],\r\n  itemToRemove: ''\r\n};\r\n\r\nAmplify.configure(awsconfig);\r\n\r\nReactDOM.render(\r\n  <AlertProvider template={AlertTemplate} {...options}>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <MuiThemeProvider>\r\n        <App />\r\n      </MuiThemeProvider>\r\n    </StateProvider>\r\n  </AlertProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}